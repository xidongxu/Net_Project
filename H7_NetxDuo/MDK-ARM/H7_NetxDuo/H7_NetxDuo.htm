<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [H7_NetxDuo\H7_NetxDuo.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image H7_NetxDuo\H7_NetxDuo.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6150002: Last Updated: Sun Jun 12 16:51:33 2022
<BR><P>
<H3>Maximum Stack Usage =       1412 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
_nx_tcp_packet_receive &rArr; _nx_tcp_packet_process &rArr; _nx_tcp_socket_packet_process &rArr; _nx_tcp_socket_state_ack_check &rArr; _nx_tcp_socket_retransmit &rArr; _nx_tcp_packet_send_probe &rArr; _nx_tcp_packet_send_control &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ip_checksum_compute &rArr; _tx_thread_sleep &rArr; _tx_thread_system_suspend &rArr; _tx_timer_system_activate
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[1fe]">_tx_initialize_low_level</a>
 <LI><a href="#[c6]">__tx_BadHandler</a>
 <LI><a href="#[c7]">__tx_HardfaultHandler</a>
 <LI><a href="#[c8]">__tx_SVCallHandler</a>
 <LI><a href="#[21e]">__tx_IntHandler</a>
 <LI><a href="#[e]">SysTick_Handler</a>
 <LI><a href="#[21f]">__tx_SysTickHandler</a>
 <LI><a href="#[ca]">__tx_NMIHandler</a>
 <LI><a href="#[cb]">__tx_DBGHandler</a>
 <LI><a href="#[200]">_tx_thread_schedule</a>
 <LI><a href="#[d]">PendSV_Handler</a>
 <LI><a href="#[220]">__tx_PendSVHandler</a>
 <LI><a href="#[221]">tx_thread_fpu_disable</a>
 <LI><a href="#[222]">tx_thread_fpu_enable</a>
 <LI><a href="#[205]">_tx_thread_stack_build</a>
 <LI><a href="#[c9]">_tx_timer_interrupt</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[b]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">SVC_Handler</a><BR>
 <LI><a href="#[87]">ADC3_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[87]">ADC3_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[87]">ADC3_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[21]">ADC_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[89]">BDMA_Channel0_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[8a]">BDMA_Channel1_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[8b]">BDMA_Channel2_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[8c]">BDMA_Channel3_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[8d]">BDMA_Channel4_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[8e]">BDMA_Channel5_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[8f]">BDMA_Channel6_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[90]">BDMA_Channel7_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[9]">BusFault_Handler</a> from stm32h7xx_it.o(.text.BusFault_Handler) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[68]">CEC_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[91]">COMP1_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[97]">CRS_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[59]">CRYP_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[58]">DCMI_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[78]">DFSDM1_FLT0_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[79]">DFSDM1_FLT1_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[7a]">DFSDM1_FLT2_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[7b]">DFSDM1_FLT3_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[1a]">DMA1_Stream0_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[1b]">DMA1_Stream1_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[1c]">DMA1_Stream2_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[1d]">DMA1_Stream3_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[1e]">DMA1_Stream4_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[1f]">DMA1_Stream5_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[20]">DMA1_Stream6_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[3d]">DMA1_Stream7_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[64]">DMA2D_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[46]">DMA2_Stream0_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[47]">DMA2_Stream1_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[48]">DMA2_Stream2_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[49]">DMA2_Stream3_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[4a]">DMA2_Stream4_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[4e]">DMA2_Stream5_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[4f]">DMA2_Stream6_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[50]">DMA2_Stream7_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[70]">DMAMUX1_OVR_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[88]">DMAMUX2_OVR_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[c]">DebugMon_Handler</a> from stm32h7xx_it.o(.text.DebugMon_Handler) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[98]">ECC_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[4b]">ETH_IRQHandler</a> from stm32h7xx_it.o(.text.ETH_IRQHandler) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[4c]">ETH_WKUP_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[15]">EXTI0_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[37]">EXTI15_10_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[16]">EXTI1_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[17]">EXTI2_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[18]">EXTI3_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[19]">EXTI4_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[26]">EXTI9_5_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[22]">FDCAN1_IT0_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[24]">FDCAN1_IT1_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[23]">FDCAN2_IT0_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[25]">FDCAN2_IT1_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[4d]">FDCAN_CAL_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[13]">FLASH_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[3e]">FMC_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[5b]">FPU_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[5a]">HASH_RNG_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[77]">HRTIM1_FLT_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[71]">HRTIM1_Master_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[72]">HRTIM1_TIMA_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[73]">HRTIM1_TIMB_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[74]">HRTIM1_TIMC_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[75]">HRTIM1_TIMD_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[76]">HRTIM1_TIME_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[86]">HSEM1_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[7]">HardFault_Handler</a> from stm32h7xx_it.o(.text.HardFault_Handler) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[2f]">I2C1_ER_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[2e]">I2C1_EV_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[31]">I2C2_ER_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[30]">I2C2_EV_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[53]">I2C3_ER_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[52]">I2C3_EV_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[6a]">I2C4_ER_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[69]">I2C4_EV_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[83]">JPEG_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[67]">LPTIM1_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[92]">LPTIM2_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[93]">LPTIM3_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[94]">LPTIM4_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[95]">LPTIM5_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[96]">LPUART1_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[63]">LTDC_ER_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[62]">LTDC_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[82]">MDIOS_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[81]">MDIOS_WKUP_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[84]">MDMA_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[8]">MemManage_Handler</a> from stm32h7xx_it.o(.text.MemManage_Handler) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[6]">NMI_Handler</a> from stm32h7xx_it.o(.text.NMI_Handler) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[6d]">OTG_FS_EP1_IN_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[6c]">OTG_FS_EP1_OUT_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[6f]">OTG_FS_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[6e]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[55]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[54]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[57]">OTG_HS_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[56]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[10]">PVD_AVD_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[d]">PendSV_Handler</a> from tx_thread_schedule.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[66]">QUADSPI_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[14]">RCC_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[38]">RTC_Alarm_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[12]">RTC_WKUP_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[5]">Reset_Handler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[61]">SAI1_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[65]">SAI2_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[7c]">SAI3_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[99]">SAI4_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[3f]">SDMMC1_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[85]">SDMMC2_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[6b]">SPDIF_RX_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[32]">SPI1_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[33]">SPI2_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[41]">SPI3_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[5e]">SPI4_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[5f]">SPI5_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[60]">SPI6_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[b]">SVC_Handler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[7d]">SWPMI1_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[e]">SysTick_Handler</a> from tx_initialize_low_level.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[9c]">SystemInit</a> from system_stm32h7xx.o(.text.SystemInit) referenced from startup_stm32h750xx.o(.text)
 <LI><a href="#[11]">TAMP_STAMP_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[7e]">TIM15_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[7f]">TIM16_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[80]">TIM17_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[27]">TIM1_BRK_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[2a]">TIM1_CC_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[29]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[28]">TIM1_UP_IRQHandler</a> from stm32h7xx_it.o(.text.TIM1_UP_IRQHandler) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[2b]">TIM2_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[2c]">TIM3_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[2d]">TIM4_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[40]">TIM5_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[44]">TIM6_DAC_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[45]">TIM7_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[39]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[3c]">TIM8_CC_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[3b]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[3a]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[42]">UART4_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[43]">UART5_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[5c]">UART7_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[5d]">UART8_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[34]">USART1_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[35]">USART2_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[36]">USART3_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[51]">USART6_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[a]">UsageFault_Handler</a> from stm32h7xx_it.o(.text.UsageFault_Handler) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[9a]">WAKEUP_PIN_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[f]">WWDG_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[9d]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32h750xx.o(.text)
 <LI><a href="#[a3]">_nx_arp_entry_allocate</a> from nx_arp_entry_allocate.o(.text._nx_arp_entry_allocate) referenced 2 times from nx_arp_enable.o(.text._nx_arp_enable)
 <LI><a href="#[a2]">_nx_arp_packet_send</a> from nx_arp_packet_send.o(.text._nx_arp_packet_send) referenced 2 times from nx_arp_enable.o(.text._nx_arp_enable)
 <LI><a href="#[a0]">_nx_arp_periodic_update</a> from nx_arp_periodic_update.o(.text._nx_arp_periodic_update) referenced 2 times from nx_arp_enable.o(.text._nx_arp_enable)
 <LI><a href="#[a1]">_nx_arp_queue_process</a> from nx_arp_queue_process.o(.text._nx_arp_queue_process) referenced 2 times from nx_arp_enable.o(.text._nx_arp_enable)
 <LI><a href="#[a5]">_nx_icmp_packet_receive</a> from nx_icmp_packet_receive.o(.text._nx_icmp_packet_receive) referenced 2 times from nx_icmp_enable.o(.text._nx_icmp_enable)
 <LI><a href="#[a4]">_nx_icmp_queue_process</a> from nx_icmp_queue_process.o(.text._nx_icmp_queue_process) referenced 2 times from nx_icmp_enable.o(.text._nx_icmp_enable)
 <LI><a href="#[a6]">_nx_icmpv4_packet_process</a> from nx_icmpv4_packet_process.o(.text._nx_icmpv4_packet_process) referenced 2 times from nx_icmp_enable.o(.text._nx_icmp_enable)
 <LI><a href="#[aa]">_nx_ip_fast_periodic_timer_entry</a> from nx_ip_fast_periodic_timer_entry.o(.text._nx_ip_fast_periodic_timer_entry) referenced 2 times from nx_ip_fast_periodic_timer_entry.o(.text._nx_ip_fast_periodic_timer_create)
 <LI><a href="#[ac]">_nx_ip_fragment_assembly</a> from nx_ip_fragment_assembly.o(.text._nx_ip_fragment_assembly) referenced 2 times from nx_ip_fragment_enable.o(.text._nx_ip_fragment_enable)
 <LI><a href="#[ab]">_nx_ip_fragment_packet</a> from nx_ip_fragment_packet.o(.text._nx_ip_fragment_packet) referenced 2 times from nx_ip_fragment_enable.o(.text._nx_ip_fragment_enable)
 <LI><a href="#[ad]">_nx_ip_fragment_timeout_check</a> from nx_ip_fragment_timeout_check.o(.text._nx_ip_fragment_timeout_check) referenced 2 times from nx_ip_fragment_enable.o(.text._nx_ip_fragment_enable)
 <LI><a href="#[a8]">_nx_ip_periodic_timer_entry</a> from nx_ip_periodic_timer_entry.o(.text._nx_ip_periodic_timer_entry) referenced 2 times from nx_ip_create.o(.text._nx_ip_create)
 <LI><a href="#[a7]">_nx_ip_thread_entry</a> from nx_ip_thread_entry.o(.text._nx_ip_thread_entry) referenced 2 times from nx_ip_create.o(.text._nx_ip_create)
 <LI><a href="#[a9]">_nx_ipv4_packet_receive</a> from nx_ipv4_packet_receive.o(.text._nx_ipv4_packet_receive) referenced 2 times from nx_ip_create.o(.text._nx_ip_create)
 <LI><a href="#[ae]">_nx_packet_pool_cleanup</a> from nx_packet_pool_cleanup.o(.text._nx_packet_pool_cleanup) referenced 2 times from nx_packet_allocate.o(.text._nx_packet_allocate)
 <LI><a href="#[af]">_nx_tcp_cleanup_deferred</a> from nx_tcp_cleanup_deferred.o(.text._nx_tcp_cleanup_deferred) referenced 2 times from nx_tcp_client_bind_cleanup.o(.text._nx_tcp_client_bind_cleanup)
 <LI><a href="#[af]">_nx_tcp_cleanup_deferred</a> from nx_tcp_cleanup_deferred.o(.text._nx_tcp_cleanup_deferred) referenced 2 times from nx_tcp_connect_cleanup.o(.text._nx_tcp_connect_cleanup)
 <LI><a href="#[af]">_nx_tcp_cleanup_deferred</a> from nx_tcp_cleanup_deferred.o(.text._nx_tcp_cleanup_deferred) referenced 10 times from nx_tcp_deferred_cleanup_check.o(.text._nx_tcp_deferred_cleanup_check)
 <LI><a href="#[af]">_nx_tcp_cleanup_deferred</a> from nx_tcp_cleanup_deferred.o(.text._nx_tcp_cleanup_deferred) referenced 2 times from nx_tcp_disconnect_cleanup.o(.text._nx_tcp_disconnect_cleanup)
 <LI><a href="#[af]">_nx_tcp_cleanup_deferred</a> from nx_tcp_cleanup_deferred.o(.text._nx_tcp_cleanup_deferred) referenced 2 times from nx_tcp_receive_cleanup.o(.text._nx_tcp_receive_cleanup)
 <LI><a href="#[af]">_nx_tcp_cleanup_deferred</a> from nx_tcp_cleanup_deferred.o(.text._nx_tcp_cleanup_deferred) referenced 2 times from nx_tcp_transmit_cleanup.o(.text._nx_tcp_transmit_cleanup)
 <LI><a href="#[b5]">_nx_tcp_connect_cleanup</a> from nx_tcp_connect_cleanup.o(.text._nx_tcp_connect_cleanup) referenced 2 times from nx_tcp_server_socket_accept.o(.text._nx_tcp_server_socket_accept)
 <LI><a href="#[b3]">_nx_tcp_deferred_cleanup_check</a> from nx_tcp_deferred_cleanup_check.o(.text._nx_tcp_deferred_cleanup_check) referenced 2 times from nx_tcp_enable.o(.text._nx_tcp_enable)
 <LI><a href="#[b6]">_nx_tcp_disconnect_cleanup</a> from nx_tcp_disconnect_cleanup.o(.text._nx_tcp_disconnect_cleanup) referenced 2 times from nx_tcp_socket_disconnect.o(.text._nx_tcp_socket_disconnect)
 <LI><a href="#[b2]">_nx_tcp_fast_periodic_processing</a> from nx_tcp_fast_periodic_processing.o(.text._nx_tcp_fast_periodic_processing) referenced 2 times from nx_tcp_enable.o(.text._nx_tcp_enable)
 <LI><a href="#[b4]">_nx_tcp_packet_receive</a> from nx_tcp_packet_receive.o(.text._nx_tcp_packet_receive) referenced 2 times from nx_tcp_enable.o(.text._nx_tcp_enable)
 <LI><a href="#[b1]">_nx_tcp_periodic_processing</a> from nx_tcp_periodic_processing.o(.text._nx_tcp_periodic_processing) referenced 2 times from nx_tcp_enable.o(.text._nx_tcp_enable)
 <LI><a href="#[b0]">_nx_tcp_queue_process</a> from nx_tcp_queue_process.o(.text._nx_tcp_queue_process) referenced 2 times from nx_tcp_enable.o(.text._nx_tcp_enable)
 <LI><a href="#[b7]">_nx_tcp_receive_cleanup</a> from nx_tcp_receive_cleanup.o(.text._nx_tcp_receive_cleanup) referenced 2 times from nx_tcp_socket_receive.o(.text._nx_tcp_socket_receive)
 <LI><a href="#[b8]">_nx_tcp_transmit_cleanup</a> from nx_tcp_transmit_cleanup.o(.text._nx_tcp_transmit_cleanup) referenced 2 times from nx_tcp_socket_send_internal.o(.text._nx_tcp_socket_send_internal)
 <LI><a href="#[b9]">_nx_udp_packet_receive</a> from nx_udp_packet_receive.o(.text._nx_udp_packet_receive) referenced 2 times from nx_udp_enable.o(.text._nx_udp_enable)
 <LI><a href="#[ba]">_tx_event_flags_cleanup</a> from tx_event_flags_cleanup.o(.text._tx_event_flags_cleanup) referenced 2 times from tx_event_flags_cleanup.o(.text._tx_event_flags_cleanup)
 <LI><a href="#[ba]">_tx_event_flags_cleanup</a> from tx_event_flags_cleanup.o(.text._tx_event_flags_cleanup) referenced 2 times from tx_event_flags_get.o(.text._tx_event_flags_get)
 <LI><a href="#[bb]">_tx_mutex_cleanup</a> from tx_mutex_cleanup.o(.text._tx_mutex_cleanup) referenced 2 times from tx_mutex_cleanup.o(.text._tx_mutex_cleanup)
 <LI><a href="#[bb]">_tx_mutex_cleanup</a> from tx_mutex_cleanup.o(.text._tx_mutex_cleanup) referenced 2 times from tx_mutex_get.o(.text._tx_mutex_get)
 <LI><a href="#[bc]">_tx_mutex_thread_release</a> from tx_mutex_cleanup.o(.text._tx_mutex_thread_release) referenced 2 times from tx_mutex_create.o(.text._tx_mutex_create)
 <LI><a href="#[bd]">_tx_semaphore_cleanup</a> from tx_semaphore_cleanup.o(.text._tx_semaphore_cleanup) referenced 2 times from tx_semaphore_cleanup.o(.text._tx_semaphore_cleanup)
 <LI><a href="#[bd]">_tx_semaphore_cleanup</a> from tx_semaphore_cleanup.o(.text._tx_semaphore_cleanup) referenced 2 times from tx_semaphore_get.o(.text._tx_semaphore_get)
 <LI><a href="#[bf]">_tx_thread_shell_entry</a> from tx_thread_shell_entry.o(.text._tx_thread_shell_entry) referenced 2 times from tx_thread_create.o(.text._tx_thread_create)
 <LI><a href="#[be]">_tx_thread_timeout</a> from tx_thread_timeout.o(.text._tx_thread_timeout) referenced 2 times from tx_thread_create.o(.text._tx_thread_create)
 <LI><a href="#[c0]">_tx_timer_thread_entry</a> from tx_timer_thread_entry.o(.text._tx_timer_thread_entry) referenced 2 times from tx_timer_initialize.o(.text._tx_timer_initialize)
 <LI><a href="#[c3]">fputc</a> from usart.o(.text.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[1]">lan8742_io_deinit</a> from nx_stm32_phy_driver.o(.text.lan8742_io_deinit) referenced 2 times from nx_stm32_phy_driver.o(.data.LAN8742_IOCtx)
 <LI><a href="#[4]">lan8742_io_get_tick</a> from nx_stm32_phy_driver.o(.text.lan8742_io_get_tick) referenced 2 times from nx_stm32_phy_driver.o(.data.LAN8742_IOCtx)
 <LI><a href="#[0]">lan8742_io_init</a> from nx_stm32_phy_driver.o(.text.lan8742_io_init) referenced 2 times from nx_stm32_phy_driver.o(.data.LAN8742_IOCtx)
 <LI><a href="#[3]">lan8742_io_read_reg</a> from nx_stm32_phy_driver.o(.text.lan8742_io_read_reg) referenced 2 times from nx_stm32_phy_driver.o(.data.LAN8742_IOCtx)
 <LI><a href="#[2]">lan8742_io_write_reg</a> from nx_stm32_phy_driver.o(.text.lan8742_io_write_reg) referenced 2 times from nx_stm32_phy_driver.o(.data.LAN8742_IOCtx)
 <LI><a href="#[9b]">main</a> from main.o(.text.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[c1]">nx_stm32_eth_driver</a> from nx_stm32_eth_driver.o(.text.nx_stm32_eth_driver) referenced 2 times from app_netxduo.o(.text.thread_1_entry)
 <LI><a href="#[c2]">tcp_listen_callback</a> from app_netxduo.o(.text.tcp_listen_callback) referenced 2 times from app_netxduo.o(.text.thread_1_entry)
 <LI><a href="#[9e]">thread_0_entry</a> from app_threadx.o(.text.thread_0_entry) referenced 2 times from app_threadx.o(.text.App_ThreadX_Init)
 <LI><a href="#[9f]">thread_1_entry</a> from app_netxduo.o(.text.thread_1_entry) referenced 2 times from app_netxduo.o(.text.MX_NetXDuo_Init)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[9d]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(.text)
</UL>
<P><STRONG><a name="[218]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[c4]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[dd]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[219]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[21a]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[21b]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[21c]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[21d]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[5]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC3_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC3_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>BDMA_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>BDMA_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>BDMA_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>BDMA_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[8d]"></a>BDMA_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[8e]"></a>BDMA_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>BDMA_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>BDMA_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>CEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>COMP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[97]"></a>CRS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>CRYP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>DFSDM1_FLT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>DFSDM1_FLT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>DFSDM1_FLT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>DFSDM1_FLT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>DMA2D_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>DMAMUX1_OVR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>DMAMUX2_OVR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[98]"></a>ECC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>FDCAN1_IT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>FDCAN1_IT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>FDCAN2_IT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>FDCAN2_IT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>FDCAN_CAL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>HRTIM1_FLT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>HRTIM1_Master_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>HRTIM1_TIMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>HRTIM1_TIMB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>HRTIM1_TIMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>HRTIM1_TIMD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>HRTIM1_TIME_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>HSEM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>I2C4_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>I2C4_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>JPEG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[92]"></a>LPTIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[93]"></a>LPTIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[94]"></a>LPTIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[95]"></a>LPTIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[96]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>LTDC_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>LTDC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>MDIOS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>MDIOS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>MDMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>OTG_FS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>OTG_FS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>PVD_AVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>QUADSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>SAI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>SAI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[99]"></a>SAI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>SDMMC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>SDMMC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>SPDIF_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>SPI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>SPI6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>SWPMI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>UART7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>UART8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[9a]"></a>WAKEUP_PIN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[1fe]"></a>_tx_initialize_low_level</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tx_initialize_low_level.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_initialize_kernel_enter
</UL>

<P><STRONG><a name="[c6]"></a>__tx_BadHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tx_initialize_low_level.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__tx_BadHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__tx_BadHandler
</UL>

<P><STRONG><a name="[c7]"></a>__tx_HardfaultHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tx_initialize_low_level.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__tx_HardfaultHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__tx_HardfaultHandler
</UL>

<P><STRONG><a name="[c8]"></a>__tx_SVCallHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tx_initialize_low_level.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__tx_SVCallHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__tx_SVCallHandler
</UL>

<P><STRONG><a name="[21e]"></a>__tx_IntHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tx_initialize_low_level.o(.text), UNUSED)

<P><STRONG><a name="[e]"></a>SysTick_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tx_initialize_low_level.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = SysTick_Handler &rArr; _tx_timer_interrupt &rArr; _tx_timer_expiration_process &rArr; _tx_thread_system_resume &rArr; _tx_timer_system_deactivate
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[21f]"></a>__tx_SysTickHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tx_initialize_low_level.o(.text), UNUSED)

<P><STRONG><a name="[ca]"></a>__tx_NMIHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tx_initialize_low_level.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__tx_NMIHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__tx_NMIHandler
</UL>

<P><STRONG><a name="[cb]"></a>__tx_DBGHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tx_initialize_low_level.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__tx_DBGHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__tx_DBGHandler
</UL>

<P><STRONG><a name="[200]"></a>_tx_thread_schedule</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tx_thread_schedule.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_initialize_kernel_enter
</UL>

<P><STRONG><a name="[d]"></a>PendSV_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tx_thread_schedule.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[220]"></a>__tx_PendSVHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tx_thread_schedule.o(.text), UNUSED)

<P><STRONG><a name="[221]"></a>tx_thread_fpu_disable</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tx_thread_schedule.o(.text), UNUSED)

<P><STRONG><a name="[222]"></a>tx_thread_fpu_enable</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tx_thread_schedule.o(.text), UNUSED)

<P><STRONG><a name="[205]"></a>_tx_thread_stack_build</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tx_thread_stack_build.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_create
</UL>

<P><STRONG><a name="[c9]"></a>_tx_timer_interrupt</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tx_timer_interrupt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = _tx_timer_interrupt &rArr; _tx_timer_expiration_process &rArr; _tx_thread_system_resume &rArr; _tx_timer_system_deactivate
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_expiration_process
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_time_slice
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[ce]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1c6]"></a>rand</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_server_socket_accept
</UL>

<P><STRONG><a name="[223]"></a>srand</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rand.o(.text), UNUSED)

<P><STRONG><a name="[224]"></a>___aeabi_memcpy4$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[225]"></a>___aeabi_memcpy8$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[1af]"></a>__aeabi_memcpy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_data_append
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_data_retrieve
</UL>

<P><STRONG><a name="[1e2]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_data_trim_front
</UL>

<P><STRONG><a name="[226]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[227]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[d2]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_create
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[228]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[229]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[d1]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_1_entry
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_arp_enable
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_create
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_create
</UL>

<P><STRONG><a name="[13a]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ETH_Init
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_driver_hardware_packet_send
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_driver_hardware_initialize
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_create
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_event_flags_create
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_create
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_create
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_pool_create
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_no_connection_reset
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_dest_table_add
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_initialize
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_initialize
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_byte_pool_create
</UL>

<P><STRONG><a name="[22a]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[d3]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[e2]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHECK_IP_ADDRESSES_BY_PREFIX
</UL>

<P><STRONG><a name="[22b]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[217]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[d0]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[22c]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[cf]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[22d]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[22e]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[d4]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>

<P><STRONG><a name="[d8]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[d9]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[da]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[db]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[dc]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[214]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[c5]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[22f]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[d5]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[230]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[d7]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[d6]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[231]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[232]"></a>__decompress0</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[de]"></a>App_ThreadX_Init</STRONG> (Thumb, 94 bytes, Stack size 56 bytes, app_threadx.o(.text.App_ThreadX_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = App_ThreadX_Init &rArr; _txe_thread_create &rArr; _tx_thread_create &rArr; _tx_thread_system_resume &rArr; _tx_timer_system_deactivate
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_thread_create
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_application_define
</UL>

<P><STRONG><a name="[9]"></a>BusFault_Handler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32h7xx_it.o(.text.BusFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BusFault_Handler &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[17b]"></a>CHECK_IPV6_ADDRESSES_SAME</STRONG> (Thumb, 90 bytes, Stack size 12 bytes, nx_ipv6_util.o(.text.CHECK_IPV6_ADDRESSES_SAME))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CHECK_IPV6_ADDRESSES_SAME
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_packet_send
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_invalidate_destination_entry
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_fragment_assembly
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_process
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxd_ipv6_interface_find
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_nd_cache_find_entry
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_dest_table_find
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_dest_table_add
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_prefix_list_delete_entry
</UL>

<P><STRONG><a name="[e1]"></a>CHECK_IP_ADDRESSES_BY_PREFIX</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, nx_ipv6_util.o(.text.CHECK_IP_ADDRESSES_BY_PREFIX))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = CHECK_IP_ADDRESSES_BY_PREFIX &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxd_ipv6_search_onlink
</UL>

<P><STRONG><a name="[181]"></a>CHECK_UNSPECIFIED_ADDRESS</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, nx_ipv6_util.o(.text.CHECK_UNSPECIFIED_ADDRESS))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CHECK_UNSPECIFIED_ADDRESS
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_send_error_message
</UL>

<P><STRONG><a name="[17c]"></a>COPY_IPV6_ADDRESS</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, nx_ipv6_util.o(.text.COPY_IPV6_ADDRESS))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = COPY_IPV6_ADDRESS
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_packet_send
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_send_ns
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_process
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_no_connection_reset
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_server_socket_relisten
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_nd_cache_add_entry
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_dest_table_add
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxd_ipv6_router_lookup
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_header_add
</UL>

<P><STRONG><a name="[c]"></a>DebugMon_Handler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32h7xx_it.o(.text.DebugMon_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DebugMon_Handler &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>ETH_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32h7xx_it.o(.text.ETH_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = ETH_IRQHandler &rArr; HAL_ETH_IRQHandler &rArr; HAL_ETH_TxCpltCallback &rArr; _nx_ip_driver_deferred_processing &rArr; _tx_event_flags_set &rArr; _tx_thread_system_resume &rArr; _tx_timer_system_deactivate
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[13b]"></a>Error_Handler</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, main.o(.text.Error_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART4_Init
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ETH_Init
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CRC_Init
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[e9]"></a>HAL_CRCEx_Polynomial_Set</STRONG> (Thumb, 272 bytes, Stack size 40 bytes, stm32h7xx_hal_crc_ex.o(.text.HAL_CRCEx_Polynomial_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_CRCEx_Polynomial_Set &rArr; assert_failed &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_Init
</UL>

<P><STRONG><a name="[eb]"></a>HAL_CRC_Init</STRONG> (Thumb, 470 bytes, Stack size 16 bytes, stm32h7xx_hal_crc.o(.text.HAL_CRC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_CRC_Init &rArr; HAL_CRCEx_Polynomial_Set &rArr; assert_failed &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_MspInit
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRCEx_Polynomial_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CRC_Init
</UL>

<P><STRONG><a name="[ec]"></a>HAL_CRC_MspInit</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, crc.o(.text.HAL_CRC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_CRC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_Init
</UL>

<P><STRONG><a name="[f1]"></a>HAL_ETH_EEECallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32h7xx_hal_eth.o(.text.HAL_ETH_EEECallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_ETH_EEECallback
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_IRQHandler
</UL>

<P><STRONG><a name="[ef]"></a>HAL_ETH_ErrorCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32h7xx_hal_eth.o(.text.HAL_ETH_ErrorCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_ETH_ErrorCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_IRQHandler
</UL>

<P><STRONG><a name="[15c]"></a>HAL_ETH_GetMACConfig</STRONG> (Thumb, 652 bytes, Stack size 12 bytes, stm32h7xx_hal_eth.o(.text.HAL_ETH_GetMACConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_ETH_GetMACConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_driver_enable
</UL>

<P><STRONG><a name="[e3]"></a>HAL_ETH_IRQHandler</STRONG> (Thumb, 512 bytes, Stack size 16 bytes, stm32h7xx_hal_eth.o(.text.HAL_ETH_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = HAL_ETH_IRQHandler &rArr; HAL_ETH_TxCpltCallback &rArr; _nx_ip_driver_deferred_processing &rArr; _tx_event_flags_set &rArr; _tx_thread_system_resume &rArr; _tx_timer_system_deactivate
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_WakeUpCallback
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_PMTCallback
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_ErrorCallback
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_EEECallback
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_TxCpltCallback
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_RxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_IRQHandler
</UL>

<P><STRONG><a name="[f3]"></a>HAL_ETH_Init</STRONG> (Thumb, 404 bytes, Stack size 32 bytes, stm32h7xx_hal_eth.o(.text.HAL_ETH_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = HAL_ETH_Init &rArr; HAL_ETH_MspInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_MspInit
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSCFG_ETHInterfaceSelect
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_SetMDIOClockRange
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACDMAConfig
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMATxDescListInit
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMARxDescListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ETH_Init
</UL>

<P><STRONG><a name="[f4]"></a>HAL_ETH_MspInit</STRONG> (Thumb, 354 bytes, Stack size 80 bytes, eth.o(.text.HAL_ETH_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = HAL_ETH_MspInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Init
</UL>

<P><STRONG><a name="[f0]"></a>HAL_ETH_PMTCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32h7xx_hal_eth.o(.text.HAL_ETH_PMTCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_ETH_PMTCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_IRQHandler
</UL>

<P><STRONG><a name="[fe]"></a>HAL_ETH_ReadData</STRONG> (Thumb, 454 bytes, Stack size 56 bytes, stm32h7xx_hal_eth.o(.text.HAL_ETH_ReadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = HAL_ETH_ReadData &rArr; ETH_UpdateDescriptor &rArr; HAL_ETH_RxAllocateCallback &rArr; _nxe_packet_allocate &rArr; _nx_packet_allocate &rArr; _tx_thread_system_suspend &rArr; _tx_timer_system_activate
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_UpdateDescriptor
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_RxLinkCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_driver_hardware_packet_received
</UL>

<P><STRONG><a name="[100]"></a>HAL_ETH_ReadPHYRegister</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, stm32h7xx_hal_eth.o(.text.HAL_ETH_ReadPHYRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_ETH_ReadPHYRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lan8742_io_read_reg
</UL>

<P><STRONG><a name="[101]"></a>HAL_ETH_ReleaseTxPacket</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, stm32h7xx_hal_eth.o(.text.HAL_ETH_ReleaseTxPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = HAL_ETH_ReleaseTxPacket &rArr; HAL_ETH_TxFreeCallback &rArr; _nxe_packet_transmit_release &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_timer_system_deactivate
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_TxFreeCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_driver_deferred_processing
</UL>

<P><STRONG><a name="[e8]"></a>HAL_ETH_RxAllocateCallback</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, nx_stm32_eth_driver.o(.text.HAL_ETH_RxAllocateCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = HAL_ETH_RxAllocateCallback &rArr; _nxe_packet_allocate &rArr; _nx_packet_allocate &rArr; _tx_thread_system_suspend &rArr; _tx_timer_system_activate
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_packet_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_UpdateDescriptor
</UL>

<P><STRONG><a name="[ed]"></a>HAL_ETH_RxCpltCallback</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, nx_stm32_eth_driver.o(.text.HAL_ETH_RxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = HAL_ETH_RxCpltCallback &rArr; _nx_ip_driver_deferred_processing &rArr; _tx_event_flags_set &rArr; _tx_thread_system_resume &rArr; _tx_timer_system_deactivate
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_driver_deferred_processing
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_IRQHandler
</UL>

<P><STRONG><a name="[ff]"></a>HAL_ETH_RxLinkCallback</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, nx_stm32_eth_driver.o(.text.HAL_ETH_RxLinkCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_ETH_RxLinkCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_ReadData
</UL>

<P><STRONG><a name="[105]"></a>HAL_ETH_SetDMAConfig</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, stm32h7xx_hal_eth.o(.text.HAL_ETH_SetDMAConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_ETH_SetDMAConfig &rArr; ETH_SetDMAConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_SetDMAConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_driver_hardware_initialize
</UL>

<P><STRONG><a name="[106]"></a>HAL_ETH_SetMACConfig</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, stm32h7xx_hal_eth.o(.text.HAL_ETH_SetMACConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_ETH_SetMACConfig &rArr; ETH_SetMACConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_SetMACConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_driver_enable
</UL>

<P><STRONG><a name="[163]"></a>HAL_ETH_SetMACFilterConfig</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, stm32h7xx_hal_eth.o(.text.HAL_ETH_SetMACFilterConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_ETH_SetMACFilterConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_driver_hardware_multicast_leave
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_driver_hardware_multicast_join
</UL>

<P><STRONG><a name="[f7]"></a>HAL_ETH_SetMDIOClockRange</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, stm32h7xx_hal_eth.o(.text.HAL_ETH_SetMDIOClockRange))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_ETH_SetMDIOClockRange &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Init
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lan8742_io_init
</UL>

<P><STRONG><a name="[107]"></a>HAL_ETH_Start_IT</STRONG> (Thumb, 226 bytes, Stack size 24 bytes, stm32h7xx_hal_eth.o(.text.HAL_ETH_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = HAL_ETH_Start_IT &rArr; ETH_UpdateDescriptor &rArr; HAL_ETH_RxAllocateCallback &rArr; _nxe_packet_allocate &rArr; _nx_packet_allocate &rArr; _tx_thread_system_suspend &rArr; _tx_timer_system_activate
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_UpdateDescriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_driver_hardware_enable
</UL>

<P><STRONG><a name="[160]"></a>HAL_ETH_Stop</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, stm32h7xx_hal_eth.o(.text.HAL_ETH_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_ETH_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_driver_hardware_disable
</UL>

<P><STRONG><a name="[108]"></a>HAL_ETH_Transmit_IT</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, stm32h7xx_hal_eth.o(.text.HAL_ETH_Transmit_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = HAL_ETH_Transmit_IT &rArr; ETH_Prepare_Tx_Descriptors
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Prepare_Tx_Descriptors
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_driver_hardware_packet_send
</UL>

<P><STRONG><a name="[ee]"></a>HAL_ETH_TxCpltCallback</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, nx_stm32_eth_driver.o(.text.HAL_ETH_TxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = HAL_ETH_TxCpltCallback &rArr; _nx_ip_driver_deferred_processing &rArr; _tx_event_flags_set &rArr; _tx_thread_system_resume &rArr; _tx_timer_system_deactivate
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_driver_deferred_processing
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_IRQHandler
</UL>

<P><STRONG><a name="[102]"></a>HAL_ETH_TxFreeCallback</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, nx_stm32_eth_driver.o(.text.HAL_ETH_TxFreeCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = HAL_ETH_TxFreeCallback &rArr; _nxe_packet_transmit_release &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_timer_system_deactivate
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_packet_transmit_release
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_ReleaseTxPacket
</UL>

<P><STRONG><a name="[f2]"></a>HAL_ETH_WakeUpCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32h7xx_hal_eth.o(.text.HAL_ETH_WakeUpCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_ETH_WakeUpCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_IRQHandler
</UL>

<P><STRONG><a name="[10b]"></a>HAL_ETH_WritePHYRegister</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, stm32h7xx_hal_eth.o(.text.HAL_ETH_WritePHYRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_ETH_WritePHYRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lan8742_io_write_reg
</UL>

<P><STRONG><a name="[fb]"></a>HAL_GPIO_Init</STRONG> (Thumb, 1686 bytes, Stack size 72 bytes, stm32h7xx_hal_gpio.o(.text.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_GPIO_Init &rArr; assert_failed &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_MspInit
</UL>

<P><STRONG><a name="[10c]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, stm32h7xx_hal_gpio.o(.text.HAL_GPIO_WritePin))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_GPIO_WritePin &rArr; assert_failed &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_0_entry
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[124]"></a>HAL_GetREVID</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32h7xx_hal.o(.text.HAL_GetREVID))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[f6]"></a>HAL_GetTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32h7xx_hal.o(.text.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_ConfigSupply
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Init
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL3_Config
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL2_Config
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_WritePHYRegister
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_ReadPHYRegister
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lan8742_io_get_tick
</UL>

<P><STRONG><a name="[130]"></a>HAL_IncTick</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32h7xx_hal.o(.text.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[10d]"></a>HAL_Init</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, stm32h7xx_hal.o(.text.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; assert_failed &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[110]"></a>HAL_InitTick</STRONG> (Thumb, 204 bytes, Stack size 72 bytes, stm32h7xx_hal_timebase_tim.o(.text.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; assert_failed &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[116]"></a>HAL_MPU_ConfigRegion</STRONG> (Thumb, 990 bytes, Stack size 16 bytes, stm32h7xx_hal_cortex.o(.text.HAL_MPU_ConfigRegion))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_MPU_ConfigRegion &rArr; assert_failed &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Config
</UL>

<P><STRONG><a name="[13f]"></a>HAL_MPU_Disable</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(.text.HAL_MPU_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Config
</UL>

<P><STRONG><a name="[140]"></a>HAL_MPU_Enable</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, stm32h7xx_hal_cortex.o(.text.HAL_MPU_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_MPU_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Config
</UL>

<P><STRONG><a name="[111]"></a>HAL_MspInit</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, stm32h7xx_hal_msp.o(.text.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[fd]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, stm32h7xx_hal_cortex.o(.text.HAL_NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_NVIC_EnableIRQ &rArr; assert_failed &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_MspInit
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[fc]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, stm32h7xx_hal_cortex.o(.text.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_NVIC_SetPriority &rArr; assert_failed &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_GetPriorityGrouping
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EncodePriority
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_MspInit
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[10e]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, stm32h7xx_hal_cortex.o(.text.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_NVIC_SetPriorityGrouping &rArr; assert_failed &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[11c]"></a>HAL_PWREx_ConfigSupply</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, stm32h7xx_hal_pwr_ex.o(.text.HAL_PWREx_ConfigSupply))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_PWREx_ConfigSupply &rArr; assert_failed &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[11d]"></a>HAL_RCCEx_GetD3PCLK1Freq</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32h7xx_hal_rcc_ex.o(.text.HAL_RCCEx_GetD3PCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_RCCEx_GetD3PCLK1Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[149]"></a>HAL_RCCEx_GetPLL2ClockFreq</STRONG> (Thumb, 688 bytes, Stack size 32 bytes, stm32h7xx_hal_rcc_ex.o(.text.HAL_RCCEx_GetPLL2ClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCCEx_GetPLL2ClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[14a]"></a>HAL_RCCEx_GetPLL3ClockFreq</STRONG> (Thumb, 688 bytes, Stack size 32 bytes, stm32h7xx_hal_rcc_ex.o(.text.HAL_RCCEx_GetPLL3ClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCCEx_GetPLL3ClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[11e]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 5840 bytes, Stack size 112 bytes, stm32h7xx_hal_rcc_ex.o(.text.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config &rArr; assert_failed &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL3_Config
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL2_Config
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[121]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 2352 bytes, Stack size 32 bytes, stm32h7xx_hal_rcc.o(.text.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; assert_failed &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[112]"></a>HAL_RCC_GetClockConfig</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, stm32h7xx_hal_rcc.o(.text.HAL_RCC_GetClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RCC_GetClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[f8]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32h7xx_hal_rcc.o(.text.HAL_RCC_GetHCLKFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Init
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetD3PCLK1Freq
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_SetMDIOClockRange
</UL>

<P><STRONG><a name="[122]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32h7xx_hal_rcc.o(.text.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_RCC_GetPCLK1Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[113]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32h7xx_hal_rcc.o(.text.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_RCC_GetPCLK2Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[10f]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 788 bytes, Stack size 40 bytes, stm32h7xx_hal_rcc.o(.text.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>

<P><STRONG><a name="[123]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 3738 bytes, Stack size 56 bytes, stm32h7xx_hal_rcc.o(.text.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_RCC_OscConfig &rArr; assert_failed &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetREVID
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[f5]"></a>HAL_SYSCFG_ETHInterfaceSelect</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, stm32h7xx_hal.o(.text.HAL_SYSCFG_ETHInterfaceSelect))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_SYSCFG_ETHInterfaceSelect &rArr; assert_failed &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Init
</UL>

<P><STRONG><a name="[12d]"></a>HAL_TIMEx_Break2Callback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32h7xx_hal_tim_ex.o(.text.HAL_TIMEx_Break2Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_TIMEx_Break2Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[12c]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32h7xx_hal_tim_ex.o(.text.HAL_TIMEx_BreakCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_TIMEx_BreakCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[12f]"></a>HAL_TIMEx_CommutCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32h7xx_hal_tim_ex.o(.text.HAL_TIMEx_CommutCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_TIMEx_CommutCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[114]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 606 bytes, Stack size 24 bytes, stm32h7xx_hal_tim.o(.text.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_TIM_Base_Init &rArr; assert_failed &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[125]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32h7xx_hal_tim.o(.text.HAL_TIM_Base_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_TIM_Base_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[115]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 526 bytes, Stack size 24 bytes, stm32h7xx_hal_tim.o(.text.HAL_TIM_Base_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_TIM_Base_Start_IT &rArr; assert_failed &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[128]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32h7xx_hal_tim.o(.text.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_TIM_IC_CaptureCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[127]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 700 bytes, Stack size 16 bytes, stm32h7xx_hal_tim.o(.text.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutCallback
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_Break2Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_IRQHandler
</UL>

<P><STRONG><a name="[129]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32h7xx_hal_tim.o(.text.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_TIM_OC_DelayElapsedCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[12a]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32h7xx_hal_tim.o(.text.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_TIM_PWM_PulseFinishedCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[12b]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, main.o(.text.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_PeriodElapsedCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[12e]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32h7xx_hal_tim.o(.text.HAL_TIM_TriggerCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_TIM_TriggerCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[131]"></a>HAL_UARTEx_DisableFifoMode</STRONG> (Thumb, 290 bytes, Stack size 24 bytes, stm32h7xx_hal_uart_ex.o(.text.HAL_UARTEx_DisableFifoMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_UARTEx_DisableFifoMode &rArr; assert_failed &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART4_Init
</UL>

<P><STRONG><a name="[132]"></a>HAL_UARTEx_SetRxFifoThreshold</STRONG> (Thumb, 382 bytes, Stack size 24 bytes, stm32h7xx_hal_uart_ex.o(.text.HAL_UARTEx_SetRxFifoThreshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_UARTEx_SetRxFifoThreshold &rArr; assert_failed &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTEx_SetNbDataToProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART4_Init
</UL>

<P><STRONG><a name="[134]"></a>HAL_UARTEx_SetTxFifoThreshold</STRONG> (Thumb, 382 bytes, Stack size 24 bytes, stm32h7xx_hal_uart_ex.o(.text.HAL_UARTEx_SetTxFifoThreshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_UARTEx_SetTxFifoThreshold &rArr; assert_failed &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTEx_SetNbDataToProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART4_Init
</UL>

<P><STRONG><a name="[135]"></a>HAL_UART_Init</STRONG> (Thumb, 542 bytes, Stack size 16 bytes, stm32h7xx_hal_uart.o(.text.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config &rArr; assert_failed &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART4_Init
</UL>

<P><STRONG><a name="[136]"></a>HAL_UART_MspInit</STRONG> (Thumb, 246 bytes, Stack size 248 bytes, usart.o(.text.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config &rArr; assert_failed &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[13c]"></a>HAL_UART_Transmit</STRONG> (Thumb, 358 bytes, Stack size 48 bytes, stm32h7xx_hal_uart.o(.text.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[7]"></a>HardFault_Handler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32h7xx_it.o(.text.HardFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HardFault_Handler &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[182]"></a>IPv6_Address_Type</STRONG> (Thumb, 414 bytes, Stack size 16 bytes, nx_ipv6_util.o(.text.IPv6_Address_Type))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IPv6_Address_Type
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_packet_send
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_send_error_message
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_fragment_cleanup
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_process
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxd_ipv6_interface_find
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxd_ipv6_search_onlink
</UL>

<P><STRONG><a name="[20d]"></a>LAN8742_GetLinkState</STRONG> (Thumb, 350 bytes, Stack size 40 bytes, lan8742.o(.text.LAN8742_GetLinkState))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LAN8742_GetLinkState
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nx_eth_phy_get_link_state
</UL>

<P><STRONG><a name="[20f]"></a>LAN8742_Init</STRONG> (Thumb, 390 bytes, Stack size 48 bytes, lan8742.o(.text.LAN8742_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LAN8742_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nx_eth_phy_init
</UL>

<P><STRONG><a name="[20e]"></a>LAN8742_RegisterBusIO</STRONG> (Thumb, 104 bytes, Stack size 12 bytes, lan8742.o(.text.LAN8742_RegisterBusIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LAN8742_RegisterBusIO
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nx_eth_phy_init
</UL>

<P><STRONG><a name="[141]"></a>MX_CRC_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, crc.o(.text.MX_CRC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MX_CRC_Init &rArr; HAL_CRC_Init &rArr; HAL_CRCEx_Polynomial_Set &rArr; assert_failed &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_Init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[142]"></a>MX_ETH_Init</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, eth.o(.text.MX_ETH_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = MX_ETH_Init &rArr; HAL_ETH_Init &rArr; HAL_ETH_MspInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Init
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[143]"></a>MX_GPIO_Init</STRONG> (Thumb, 216 bytes, Stack size 64 bytes, gpio.o(.text.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[144]"></a>MX_NetXDuo_Init</STRONG> (Thumb, 94 bytes, Stack size 56 bytes, app_netxduo.o(.text.MX_NetXDuo_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = MX_NetXDuo_Init &rArr; _txe_thread_create &rArr; _tx_thread_create &rArr; _tx_thread_system_resume &rArr; _tx_timer_system_deactivate
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_thread_create
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_application_define
</UL>

<P><STRONG><a name="[145]"></a>MX_ThreadX_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, app_threadx.o(.text.MX_ThreadX_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = MX_ThreadX_Init &rArr; _tx_initialize_kernel_enter &rArr; tx_application_define &rArr; App_ThreadX_Init &rArr; _txe_thread_create &rArr; _tx_thread_create &rArr; _tx_thread_system_resume &rArr; _tx_timer_system_deactivate
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_initialize_kernel_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[147]"></a>MX_UART4_Init</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, usart.o(.text.MX_UART4_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = MX_UART4_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config &rArr; assert_failed &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetTxFifoThreshold
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetRxFifoThreshold
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_DisableFifoMode
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8]"></a>MemManage_Handler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32h7xx_it.o(.text.MemManage_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MemManage_Handler &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>NMI_Handler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32h7xx_it.o(.text.NMI_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = NMI_Handler &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[186]"></a>SET_SOLICITED_NODE_MULTICAST_ADDRESS</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, nx_ipv6_util.o(.text.SET_SOLICITED_NODE_MULTICAST_ADDRESS))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SET_SOLICITED_NODE_MULTICAST_ADDRESS
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_thread_entry
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_send_ns
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_prefix_list_delete_entry
</UL>

<P><STRONG><a name="[1a9]"></a>SET_UNSPECIFIED_ADDRESS</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, nx_ipv6_util.o(.text.SET_UNSPECIFIED_ADDRESS))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SET_UNSPECIFIED_ADDRESS
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_packet_send
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_block_cleanup
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_server_socket_unaccept
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_prefix_list_delete_entry
</UL>

<P><STRONG><a name="[148]"></a>SystemClock_Config</STRONG> (Thumb, 232 bytes, Stack size 120 bytes, main.o(.text.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; assert_failed &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_ConfigSupply
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9c]"></a>SystemInit</STRONG> (Thumb, 346 bytes, Stack size 0 bytes, system_stm32h7xx.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(.text)
</UL>
<P><STRONG><a name="[28]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32h7xx_it.o(.text.TIM1_UP_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TIM1_UP_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[126]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 410 bytes, Stack size 12 bytes, stm32h7xx_hal_tim.o(.text.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[138]"></a>UART_AdvFeatureConfig</STRONG> (Thumb, 930 bytes, Stack size 16 bytes, stm32h7xx_hal_uart.o(.text.UART_AdvFeatureConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UART_AdvFeatureConfig &rArr; assert_failed &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[139]"></a>UART_CheckIdleState</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, stm32h7xx_hal_uart.o(.text.UART_CheckIdleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = UART_CheckIdleState &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[137]"></a>UART_SetConfig</STRONG> (Thumb, 2948 bytes, Stack size 120 bytes, stm32h7xx_hal_uart.o(.text.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = UART_SetConfig &rArr; HAL_RCC_GetPCLK2Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL3ClockFreq
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL2ClockFreq
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetD3PCLK1Freq
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[13d]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 380 bytes, Stack size 48 bytes, stm32h7xx_hal_uart.o(.text.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[a]"></a>UsageFault_Handler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32h7xx_it.o(.text.UsageFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UsageFault_Handler &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[14b]"></a>_nx_arp_dynamic_entry_delete</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, nx_arp_dynamic_entry_delete.o(.text._nx_arp_dynamic_entry_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = _nx_arp_dynamic_entry_delete &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_timer_system_deactivate
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_transmit_release
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_arp_entry_allocate
</UL>

<P><STRONG><a name="[14d]"></a>_nx_arp_enable</STRONG> (Thumb, 238 bytes, Stack size 32 bytes, nx_arp_enable.o(.text._nx_arp_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _nx_arp_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_arp_enable
</UL>

<P><STRONG><a name="[a3]"></a>_nx_arp_entry_allocate</STRONG> (Thumb, 384 bytes, Stack size 48 bytes, nx_arp_entry_allocate.o(.text._nx_arp_entry_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = _nx_arp_entry_allocate &rArr; _nx_arp_dynamic_entry_delete &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_timer_system_deactivate
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_arp_dynamic_entry_delete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nx_arp_enable.o(.text._nx_arp_enable)
</UL>
<P><STRONG><a name="[14e]"></a>_nx_arp_packet_deferred_receive</STRONG> (Thumb, 170 bytes, Stack size 48 bytes, nx_arp_packet_deferred_receive.o(.text._nx_arp_packet_deferred_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _nx_arp_packet_deferred_receive &rArr; _tx_event_flags_set &rArr; _tx_thread_system_resume &rArr; _tx_timer_system_deactivate
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_event_flags_set
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_release
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_driver_transfer_to_netx
</UL>

<P><STRONG><a name="[151]"></a>_nx_arp_packet_receive</STRONG> (Thumb, 1538 bytes, Stack size 216 bytes, nx_arp_packet_receive.o(.text._nx_arp_packet_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = _nx_arp_packet_receive &rArr; _nx_arp_packet_send &rArr; _tx_thread_sleep &rArr; _tx_thread_system_suspend &rArr; _tx_timer_system_activate
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_arp_queue_send
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_arp_packet_send
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_release
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_arp_queue_process
</UL>

<P><STRONG><a name="[a2]"></a>_nx_arp_packet_send</STRONG> (Thumb, 532 bytes, Stack size 128 bytes, nx_arp_packet_send.o(.text._nx_arp_packet_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = _nx_arp_packet_send &rArr; _tx_thread_sleep &rArr; _tx_thread_system_suspend &rArr; _tx_timer_system_activate
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_sleep
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_arp_periodic_update
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_arp_packet_receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nx_arp_enable.o(.text._nx_arp_enable)
</UL>
<P><STRONG><a name="[a0]"></a>_nx_arp_periodic_update</STRONG> (Thumb, 500 bytes, Stack size 48 bytes, nx_arp_periodic_update.o(.text._nx_arp_periodic_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = _nx_arp_periodic_update &rArr; _nx_arp_packet_send &rArr; _tx_thread_sleep &rArr; _tx_thread_system_suspend &rArr; _tx_timer_system_activate
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_arp_packet_send
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_transmit_release
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nx_arp_enable.o(.text._nx_arp_enable)
</UL>
<P><STRONG><a name="[a1]"></a>_nx_arp_queue_process</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, nx_arp_queue_process.o(.text._nx_arp_queue_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 588<LI>Call Chain = _nx_arp_queue_process &rArr; _nx_arp_packet_receive &rArr; _nx_arp_packet_send &rArr; _tx_thread_sleep &rArr; _tx_thread_system_suspend &rArr; _tx_timer_system_activate
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_arp_packet_receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nx_arp_enable.o(.text._nx_arp_enable)
</UL>
<P><STRONG><a name="[152]"></a>_nx_arp_queue_send</STRONG> (Thumb, 244 bytes, Stack size 80 bytes, nx_arp_queue_send.o(.text._nx_arp_queue_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = _nx_arp_queue_send &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_timer_system_deactivate
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_transmit_release
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_arp_packet_receive
</UL>

<P><STRONG><a name="[1e6]"></a>_nx_icmp_enable</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, nx_icmp_enable.o(.text._nx_icmp_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _nx_icmp_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_icmp_enable
</UL>

<P><STRONG><a name="[16e]"></a>_nx_icmp_packet_process</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, nx_icmp_packet_process.o(.text._nx_icmp_packet_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = _nx_icmp_packet_process &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_timer_system_deactivate
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_release
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmp_queue_process
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmp_packet_receive
</UL>

<P><STRONG><a name="[a5]"></a>_nx_icmp_packet_receive</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, nx_icmp_packet_receive.o(.text._nx_icmp_packet_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = _nx_icmp_packet_receive &rArr; _tx_event_flags_set &rArr; _tx_thread_system_resume &rArr; _tx_timer_system_deactivate
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_event_flags_set
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_release
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmp_packet_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nx_icmp_enable.o(.text._nx_icmp_enable)
</UL>
<P><STRONG><a name="[a4]"></a>_nx_icmp_queue_process</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, nx_icmp_queue_process.o(.text._nx_icmp_queue_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = _nx_icmp_queue_process &rArr; _nx_icmp_packet_process &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_timer_system_deactivate
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmp_packet_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nx_icmp_enable.o(.text._nx_icmp_enable)
</UL>
<P><STRONG><a name="[a6]"></a>_nx_icmpv4_packet_process</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, nx_icmpv4_packet_process.o(.text._nx_icmpv4_packet_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 620<LI>Call Chain = _nx_icmpv4_packet_process &rArr; _nx_icmpv4_process_echo_request &rArr; _nx_ip_packet_send &rArr; _nx_ip_driver_packet_send &rArr; _nx_packet_copy &rArr; _nx_packet_data_append &rArr; _nx_packet_allocate &rArr; _tx_thread_system_suspend &rArr; _tx_timer_system_activate
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_release
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_checksum_compute
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv4_process_echo_request
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv4_process_echo_reply
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nx_icmp_enable.o(.text._nx_icmp_enable)
</UL>
<P><STRONG><a name="[170]"></a>_nx_icmpv4_process_echo_reply</STRONG> (Thumb, 382 bytes, Stack size 72 bytes, nx_icmpv4_process_echo_reply.o(.text._nx_icmpv4_process_echo_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = _nx_icmpv4_process_echo_reply &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_timer_system_deactivate
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_release
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_preempt_check
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv4_packet_process
</UL>

<P><STRONG><a name="[171]"></a>_nx_icmpv4_process_echo_request</STRONG> (Thumb, 222 bytes, Stack size 64 bytes, nx_icmpv4_process_echo_request.o(.text._nx_icmpv4_process_echo_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 588<LI>Call Chain = _nx_icmpv4_process_echo_request &rArr; _nx_ip_packet_send &rArr; _nx_ip_driver_packet_send &rArr; _nx_packet_copy &rArr; _nx_packet_data_append &rArr; _nx_packet_allocate &rArr; _tx_thread_system_suspend &rArr; _tx_timer_system_activate
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_route_find
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_packet_send
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv4_packet_process
</UL>

<P><STRONG><a name="[176]"></a>_nx_icmpv4_send_error_message</STRONG> (Thumb, 684 bytes, Stack size 128 bytes, nx_icmpv4_send_error_message.o(.text._nx_icmpv4_send_error_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 652<LI>Call Chain = _nx_icmpv4_send_error_message &rArr; _nx_ip_packet_send &rArr; _nx_ip_driver_packet_send &rArr; _nx_packet_copy &rArr; _nx_packet_data_append &rArr; _nx_packet_allocate &rArr; _tx_thread_system_suspend &rArr; _tx_timer_system_activate
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_allocate
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_route_find
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_packet_send
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_checksum_compute
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_dispatch_process
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_fragment_cleanup
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv4_option_process
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_udp_packet_receive
</UL>

<P><STRONG><a name="[177]"></a>_nx_icmpv6_DAD_clear_NDCache_entry</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, nx_icmpv6_dad_clear_ndcache_entry.o(.text._nx_icmpv6_DAD_clear_NDCache_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = _nx_icmpv6_DAD_clear_NDCache_entry &rArr; _nx_nd_cache_find_entry &rArr; CHECK_IPV6_ADDRESSES_SAME
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_nd_cache_find_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_perform_DAD
</UL>

<P><STRONG><a name="[179]"></a>_nx_icmpv6_dest_table_add</STRONG> (Thumb, 426 bytes, Stack size 56 bytes, nx_icmpv6_dest_table_add.o(.text._nx_icmpv6_dest_table_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = _nx_icmpv6_dest_table_add &rArr; _nx_nd_cache_add_entry &rArr; _nx_nd_cache_delete_internal &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_timer_system_deactivate
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_sleep
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHECK_IPV6_ADDRESSES_SAME
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COPY_IPV6_ADDRESS
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_nd_cache_find_entry
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_nd_cache_add_entry
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_dest_table_find
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_packet_send
</UL>

<P><STRONG><a name="[17a]"></a>_nx_icmpv6_dest_table_find</STRONG> (Thumb, 216 bytes, Stack size 48 bytes, nx_icmpv6_dest_table_find.o(.text._nx_icmpv6_dest_table_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = _nx_icmpv6_dest_table_find &rArr; _tx_thread_sleep &rArr; _tx_thread_system_suspend &rArr; _tx_timer_system_activate
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_sleep
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHECK_IPV6_ADDRESSES_SAME
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_packet_send
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_dest_table_add
</UL>

<P><STRONG><a name="[17e]"></a>_nx_icmpv6_perform_DAD</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, nx_icmpv6_perform_dad.o(.text._nx_icmpv6_perform_DAD))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = _nx_icmpv6_perform_DAD &rArr; _nx_icmpv6_send_ns &rArr; _nx_ip_checksum_compute &rArr; _tx_thread_sleep &rArr; _tx_thread_system_suspend &rArr; _tx_timer_system_activate
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_send_ns
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_DAD_clear_NDCache_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_thread_entry
</UL>

<P><STRONG><a name="[180]"></a>_nx_icmpv6_send_error_message</STRONG> (Thumb, 658 bytes, Stack size 104 bytes, nx_icmpv6_send_error_message.o(.text._nx_icmpv6_send_error_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 700<LI>Call Chain = _nx_icmpv6_send_error_message &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ip_checksum_compute &rArr; _tx_thread_sleep &rArr; _tx_thread_system_suspend &rArr; _tx_timer_system_activate
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_allocate
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_release
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_checksum_compute
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_packet_send
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPv6_Address_Type
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxd_ipv6_interface_find
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHECK_UNSPECIFIED_ADDRESS
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_process_routing_option
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_process_fragment_option
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_dispatch_process
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_fragment_cleanup
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_udp_packet_receive
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_option_error
</UL>

<P><STRONG><a name="[17f]"></a>_nx_icmpv6_send_ns</STRONG> (Thumb, 604 bytes, Stack size 144 bytes, nx_icmpv6_send_ns.o(.text._nx_icmpv6_send_ns))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = _nx_icmpv6_send_ns &rArr; _nx_ip_checksum_compute &rArr; _tx_thread_sleep &rArr; _tx_thread_system_suspend &rArr; _tx_timer_system_activate
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_sleep
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_allocate
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_release
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_checksum_compute
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_SOLICITED_NODE_MULTICAST_ADDRESS
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COPY_IPV6_ADDRESS
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_address_change_endian
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_header_add
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_packet_send
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_thread_entry
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_perform_DAD
</UL>

<P><STRONG><a name="[188]"></a>_nx_icmpv6_send_rs</STRONG> (Thumb, 388 bytes, Stack size 64 bytes, nx_icmpv6_send_rs.o(.text._nx_icmpv6_send_rs))
<BR><BR>[Stack]<UL><LI>Max Depth = 660<LI>Call Chain = _nx_icmpv6_send_rs &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ip_checksum_compute &rArr; _tx_thread_sleep &rArr; _tx_thread_system_suspend &rArr; _tx_timer_system_activate
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_allocate
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_release
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_checksum_compute
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_packet_send
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxd_ipv6_interface_find
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxd_ipv6_router_solicitation_check
</UL>

<P><STRONG><a name="[1a4]"></a>_nx_igmp_multicast_check</STRONG> (Thumb, 118 bytes, Stack size 20 bytes, nx_igmp_multicast_check.o(.text._nx_igmp_multicast_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _nx_igmp_multicast_check
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv4_packet_receive
</UL>

<P><STRONG><a name="[189]"></a>_nx_invalidate_destination_entry</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, nx_invalidate_destination_entry.o(.text._nx_invalidate_destination_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = _nx_invalidate_destination_entry &rArr; CHECK_IPV6_ADDRESSES_SAME
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHECK_IPV6_ADDRESSES_SAME
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxd_ipv6_prefix_router_timer_tick
</UL>

<P><STRONG><a name="[16f]"></a>_nx_ip_checksum_compute</STRONG> (Thumb, 582 bytes, Stack size 72 bytes, nx_ip_checksum_compute.o(.text._nx_ip_checksum_compute))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = _nx_ip_checksum_compute &rArr; _tx_thread_sleep &rArr; _tx_thread_system_suspend &rArr; _tx_timer_system_activate
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv4_packet_process
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv4_send_error_message
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv4_packet_receive
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_send_error_message
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_header_add
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_send_ns
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_retransmit
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_process
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_send_control
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_send_internal
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_send_rs
</UL>

<P><STRONG><a name="[18a]"></a>_nx_ip_create</STRONG> (Thumb, 692 bytes, Stack size 120 bytes, nx_ip_create.o(.text._nx_ip_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = _nx_ip_create &rArr; _tx_thread_create &rArr; _tx_thread_system_resume &rArr; _tx_timer_system_deactivate
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_create
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_event_flags_create
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_create
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_preemption_change
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_identify
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_create
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_ip_create
</UL>

<P><STRONG><a name="[1a2]"></a>_nx_ip_deferred_link_status_process</STRONG> (Thumb, 174 bytes, Stack size 64 bytes, nx_ip_deferred_link_status_process.o(.text._nx_ip_deferred_link_status_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _nx_ip_deferred_link_status_process
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_thread_entry
</UL>

<P><STRONG><a name="[191]"></a>_nx_ip_dispatch_process</STRONG> (Thumb, 1190 bytes, Stack size 80 bytes, nx_ip_dispatch_process.o(.text._nx_ip_dispatch_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 868<LI>Call Chain = _nx_ip_dispatch_process &rArr; _nx_ipv6_process_hop_by_hop_option &rArr; _nx_ipv6_option_error &rArr; _nx_icmpv6_send_error_message &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ip_checksum_compute &rArr; _tx_thread_sleep &rArr; _tx_thread_system_suspend &rArr; _tx_timer_system_activate
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv4_send_error_message
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_process_routing_option
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_process_hop_by_hop_option
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_process_fragment_option
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_send_error_message
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv4_packet_receive
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_fragment_assembly
</UL>

<P><STRONG><a name="[104]"></a>_nx_ip_driver_deferred_processing</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, nx_ip_driver_deferred_processing.o(.text._nx_ip_driver_deferred_processing))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = _nx_ip_driver_deferred_processing &rArr; _tx_event_flags_set &rArr; _tx_thread_system_resume &rArr; _tx_timer_system_deactivate
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_event_flags_set
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_TxCpltCallback
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_RxCpltCallback
</UL>

<P><STRONG><a name="[195]"></a>_nx_ip_driver_packet_send</STRONG> (Thumb, 1168 bytes, Stack size 144 bytes, nx_ip_driver_packet_send.o(.text._nx_ip_driver_packet_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = _nx_ip_driver_packet_send &rArr; _nx_packet_copy &rArr; _nx_packet_data_append &rArr; _nx_packet_allocate &rArr; _tx_thread_system_suspend &rArr; _tx_timer_system_activate
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_sleep
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_packet_deferred_receive
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_transmit_release
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_packet_send
</UL>

<P><STRONG><a name="[197]"></a>_nx_ip_fast_periodic_timer_create</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, nx_ip_fast_periodic_timer_entry.o(.text._nx_ip_fast_periodic_timer_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = _nx_ip_fast_periodic_timer_create &rArr; _tx_timer_create &rArr; _tx_timer_system_activate
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_create
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_enable
</UL>

<P><STRONG><a name="[ac]"></a>_nx_ip_fragment_assembly</STRONG> (Thumb, 1418 bytes, Stack size 112 bytes, nx_ip_fragment_assembly.o(.text._nx_ip_fragment_assembly))
<BR><BR>[Stack]<UL><LI>Max Depth = 980<LI>Call Chain = _nx_ip_fragment_assembly &rArr; _nx_ip_dispatch_process &rArr; _nx_ipv6_process_hop_by_hop_option &rArr; _nx_ipv6_option_error &rArr; _nx_icmpv6_send_error_message &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ip_checksum_compute &rArr; _tx_thread_sleep &rArr; _tx_thread_system_suspend &rArr; _tx_timer_system_activate
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_release
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHECK_IPV6_ADDRESSES_SAME
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_dispatch_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nx_ip_fragment_enable.o(.text._nx_ip_fragment_enable)
</UL>
<P><STRONG><a name="[1e9]"></a>_nx_ip_fragment_enable</STRONG> (Thumb, 78 bytes, Stack size 20 bytes, nx_ip_fragment_enable.o(.text._nx_ip_fragment_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _nx_ip_fragment_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_ip_fragment_enable
</UL>

<P><STRONG><a name="[ab]"></a>_nx_ip_fragment_packet</STRONG> (Thumb, 1282 bytes, Stack size 200 bytes, nx_ip_fragment_packet.o(.text._nx_ip_fragment_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = _nx_ip_fragment_packet &rArr; _nx_packet_data_append &rArr; _nx_packet_allocate &rArr; _tx_thread_system_suspend &rArr; _tx_timer_system_activate
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_allocate
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_transmit_release
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_release
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_data_append
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nx_ip_fragment_enable.o(.text._nx_ip_fragment_enable)
</UL>
<P><STRONG><a name="[ad]"></a>_nx_ip_fragment_timeout_check</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, nx_ip_fragment_timeout_check.o(.text._nx_ip_fragment_timeout_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 756<LI>Call Chain = _nx_ip_fragment_timeout_check &rArr; _nx_ip_fragment_cleanup &rArr; _nx_icmpv6_send_error_message &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ip_checksum_compute &rArr; _tx_thread_sleep &rArr; _tx_thread_system_suspend &rArr; _tx_timer_system_activate
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_fragment_cleanup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nx_ip_fragment_enable.o(.text._nx_ip_fragment_enable)
</UL>
<P><STRONG><a name="[19a]"></a>_nx_ip_header_add</STRONG> (Thumb, 654 bytes, Stack size 120 bytes, nx_ip_header_add.o(.text._nx_ip_header_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = _nx_ip_header_add &rArr; _nx_ip_checksum_compute &rArr; _tx_thread_sleep &rArr; _tx_thread_system_suspend &rArr; _tx_timer_system_activate
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_sleep
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_checksum_compute
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_packet_send
</UL>

<P><STRONG><a name="[1b4]"></a>_nx_ip_initialize</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, nx_ip_initialize.o(.text._nx_ip_initialize))
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_system_initialize
</UL>

<P><STRONG><a name="[16b]"></a>_nx_ip_packet_deferred_receive</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, nx_ip_packet_deferred_receive.o(.text._nx_ip_packet_deferred_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = _nx_ip_packet_deferred_receive &rArr; _tx_event_flags_set &rArr; _tx_thread_system_resume &rArr; _tx_timer_system_deactivate
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_event_flags_set
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_driver_transfer_to_netx
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_packet_send
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_driver_packet_send
</UL>

<P><STRONG><a name="[19b]"></a>_nx_ip_packet_receive</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, nx_ip_packet_receive.o(.text._nx_ip_packet_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = _nx_ip_packet_receive &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_timer_system_deactivate
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_release
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_thread_entry
</UL>

<P><STRONG><a name="[175]"></a>_nx_ip_packet_send</STRONG> (Thumb, 232 bytes, Stack size 48 bytes, nx_ip_packet_send.o(.text._nx_ip_packet_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = _nx_ip_packet_send &rArr; _nx_ip_driver_packet_send &rArr; _nx_packet_copy &rArr; _nx_packet_data_append &rArr; _nx_packet_allocate &rArr; _tx_thread_system_suspend &rArr; _tx_timer_system_activate
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_route_find
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_transmit_release
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_driver_packet_send
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_header_add
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv4_process_echo_request
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv4_send_error_message
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_retransmit
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_send_control
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_send_internal
</UL>

<P><STRONG><a name="[a8]"></a>_nx_ip_periodic_timer_entry</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, nx_ip_periodic_timer_entry.o(.text._nx_ip_periodic_timer_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = _nx_ip_periodic_timer_entry &rArr; _tx_event_flags_set &rArr; _tx_thread_system_resume &rArr; _tx_timer_system_deactivate
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_event_flags_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nx_ip_create.o(.text._nx_ip_create)
</UL>
<P><STRONG><a name="[174]"></a>_nx_ip_route_find</STRONG> (Thumb, 848 bytes, Stack size 28 bytes, nx_ip_route_find.o(.text._nx_ip_route_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = _nx_ip_route_find
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_packet_send
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv4_process_echo_request
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv4_send_error_message
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_process
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_no_connection_reset
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_server_socket_relisten
</UL>

<P><STRONG><a name="[a7]"></a>_nx_ip_thread_entry</STRONG> (Thumb, 1384 bytes, Stack size 176 bytes, nx_ip_thread_entry.o(.text._nx_ip_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 852<LI>Call Chain = _nx_ip_thread_entry &rArr; _nxd_ipv6_router_solicitation_check &rArr; _nx_icmpv6_send_rs &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ip_checksum_compute &rArr; _tx_thread_sleep &rArr; _tx_thread_system_suspend &rArr; _tx_timer_system_activate
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_put
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_get
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_event_flags_get
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_deferred_link_status_process
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_multicast_join
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_packet_receive
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxd_ipv6_router_solicitation_check
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxd_ipv6_prefix_router_timer_tick
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_send_ns
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_perform_DAD
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_SOLICITED_NODE_MULTICAST_ADDRESS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nx_ip_create.o(.text._nx_ip_create)
</UL>
<P><STRONG><a name="[1a3]"></a>_nx_ipv4_option_process</STRONG> (Thumb, 480 bytes, Stack size 56 bytes, nx_ipv4_option_process.o(.text._nx_ipv4_option_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 708<LI>Call Chain = _nx_ipv4_option_process &rArr; _nx_icmpv4_send_error_message &rArr; _nx_ip_packet_send &rArr; _nx_ip_driver_packet_send &rArr; _nx_packet_copy &rArr; _nx_packet_data_append &rArr; _nx_packet_allocate &rArr; _tx_thread_system_suspend &rArr; _tx_timer_system_activate
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv4_send_error_message
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv4_packet_receive
</UL>

<P><STRONG><a name="[a9]"></a>_nx_ipv4_packet_receive</STRONG> (Thumb, 1544 bytes, Stack size 168 bytes, nx_ipv4_packet_receive.o(.text._nx_ipv4_packet_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 1036<LI>Call Chain = _nx_ipv4_packet_receive &rArr; _nx_ip_dispatch_process &rArr; _nx_ipv6_process_hop_by_hop_option &rArr; _nx_ipv6_option_error &rArr; _nx_icmpv6_send_error_message &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ip_checksum_compute &rArr; _tx_thread_sleep &rArr; _tx_thread_system_suspend &rArr; _tx_timer_system_activate
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_event_flags_set
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_release
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_checksum_compute
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_igmp_multicast_check
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_dispatch_process
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv4_option_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nx_ip_create.o(.text._nx_ip_create)
</UL>
<P><STRONG><a name="[185]"></a>_nx_ipv6_address_change_endian</STRONG> (Thumb, 204 bytes, Stack size 36 bytes, nx_ipv6_util.o(.text._nx_ipv6_address_change_endian))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = _nx_ipv6_address_change_endian
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_send_ns
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_header_add
</UL>

<P><STRONG><a name="[1a5]"></a>_nx_ipv6_fragment_process</STRONG> (Thumb, 948 bytes, Stack size 176 bytes, nx_ipv6_fragment_process.o(.text._nx_ipv6_fragment_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = _nx_ipv6_fragment_process &rArr; _nx_packet_allocate &rArr; _tx_thread_system_suspend &rArr; _tx_timer_system_activate
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_allocate
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_transmit_release
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_release
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_packet_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_packet_send
</UL>

<P><STRONG><a name="[187]"></a>_nx_ipv6_header_add</STRONG> (Thumb, 376 bytes, Stack size 72 bytes, nx_ipv6_header_add.o(.text._nx_ipv6_header_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = _nx_ipv6_header_add &rArr; _tx_thread_sleep &rArr; _tx_thread_system_suspend &rArr; _tx_timer_system_activate
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_sleep
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_transmit_release
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COPY_IPV6_ADDRESS
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_address_change_endian
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_packet_send
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_send_ns
</UL>

<P><STRONG><a name="[19d]"></a>_nx_ipv6_multicast_join</STRONG> (Thumb, 80 bytes, Stack size 64 bytes, nx_ipv6_multicast_join.o(.text._nx_ipv6_multicast_join))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = _nx_ipv6_multicast_join &rArr; _tx_mutex_put &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_suspend &rArr; _tx_timer_system_activate
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_put
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_get
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_thread_entry
</UL>

<P><STRONG><a name="[1a7]"></a>_nx_ipv6_multicast_leave</STRONG> (Thumb, 80 bytes, Stack size 64 bytes, nx_ipv6_multicast_leave.o(.text._nx_ipv6_multicast_leave))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = _nx_ipv6_multicast_leave &rArr; _tx_mutex_put &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_suspend &rArr; _tx_timer_system_activate
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_put
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_prefix_list_delete_entry
</UL>

<P><STRONG><a name="[1a8]"></a>_nx_ipv6_option_error</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, nx_ipv6_option_error.o(.text._nx_ipv6_option_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 740<LI>Call Chain = _nx_ipv6_option_error &rArr; _nx_icmpv6_send_error_message &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ip_checksum_compute &rArr; _tx_thread_sleep &rArr; _tx_thread_system_suspend &rArr; _tx_timer_system_activate
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_send_error_message
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_process_hop_by_hop_option
</UL>

<P><STRONG><a name="[1a6]"></a>_nx_ipv6_packet_copy</STRONG> (Thumb, 578 bytes, Stack size 60 bytes, nx_ipv6_packet_copy.o(.text._nx_ipv6_packet_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = _nx_ipv6_packet_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_fragment_process
</UL>

<P><STRONG><a name="[184]"></a>_nx_ipv6_packet_send</STRONG> (Thumb, 1028 bytes, Stack size 168 bytes, nx_ipv6_packet_send.o(.text._nx_ipv6_packet_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 596<LI>Call Chain = _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ip_checksum_compute &rArr; _tx_thread_sleep &rArr; _tx_thread_system_suspend &rArr; _tx_timer_system_activate
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_sleep
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_packet_deferred_receive
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_transmit_release
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHECK_IPV6_ADDRESSES_SAME
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_copy
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPv6_Address_Type
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_send_ns
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COPY_IPV6_ADDRESS
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_UNSPECIFIED_ADDRESS
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_dest_table_find
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_dest_table_add
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxd_ipv6_router_lookup
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_fragment_process
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_header_add
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxd_ipv6_search_onlink
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_send_error_message
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_retransmit
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_send_control
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_send_internal
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_send_rs
</UL>

<P><STRONG><a name="[1ac]"></a>_nx_ipv6_prefix_list_delete_entry</STRONG> (Thumb, 342 bytes, Stack size 72 bytes, nx_ipv6_prefix_list_delete_entry.o(.text._nx_ipv6_prefix_list_delete_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = _nx_ipv6_prefix_list_delete_entry &rArr; _nx_ipv6_multicast_leave &rArr; _tx_mutex_put &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_suspend &rArr; _tx_timer_system_activate
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHECK_IPV6_ADDRESSES_SAME
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_SOLICITED_NODE_MULTICAST_ADDRESS
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_UNSPECIFIED_ADDRESS
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_multicast_leave
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxd_ipv6_prefix_router_timer_tick
</UL>

<P><STRONG><a name="[194]"></a>_nx_ipv6_process_fragment_option</STRONG> (Thumb, 342 bytes, Stack size 56 bytes, nx_ipv6_process_fragment_option.o(.text._nx_ipv6_process_fragment_option))
<BR><BR>[Stack]<UL><LI>Max Depth = 756<LI>Call Chain = _nx_ipv6_process_fragment_option &rArr; _nx_icmpv6_send_error_message &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ip_checksum_compute &rArr; _tx_thread_sleep &rArr; _tx_thread_system_suspend &rArr; _tx_timer_system_activate
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_event_flags_set
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_send_error_message
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_dispatch_process
</UL>

<P><STRONG><a name="[192]"></a>_nx_ipv6_process_hop_by_hop_option</STRONG> (Thumb, 284 bytes, Stack size 48 bytes, nx_ipv6_process_hop_by_hop_option.o(.text._nx_ipv6_process_hop_by_hop_option))
<BR><BR>[Stack]<UL><LI>Max Depth = 788<LI>Call Chain = _nx_ipv6_process_hop_by_hop_option &rArr; _nx_ipv6_option_error &rArr; _nx_icmpv6_send_error_message &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ip_checksum_compute &rArr; _tx_thread_sleep &rArr; _tx_thread_system_suspend &rArr; _tx_timer_system_activate
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_option_error
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_dispatch_process
</UL>

<P><STRONG><a name="[193]"></a>_nx_ipv6_process_routing_option</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, nx_ipv6_process_routing_option.o(.text._nx_ipv6_process_routing_option))
<BR><BR>[Stack]<UL><LI>Max Depth = 732<LI>Call Chain = _nx_ipv6_process_routing_option &rArr; _nx_icmpv6_send_error_message &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ip_checksum_compute &rArr; _tx_thread_sleep &rArr; _tx_thread_system_suspend &rArr; _tx_timer_system_activate
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_send_error_message
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_dispatch_process
</UL>

<P><STRONG><a name="[17d]"></a>_nx_nd_cache_add_entry</STRONG> (Thumb, 442 bytes, Stack size 56 bytes, nx_nd_cache_add_entry.o(.text._nx_nd_cache_add_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = _nx_nd_cache_add_entry &rArr; _nx_nd_cache_delete_internal &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_timer_system_deactivate
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COPY_IPV6_ADDRESS
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_nd_cache_delete_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_dest_table_add
</UL>

<P><STRONG><a name="[1ad]"></a>_nx_nd_cache_delete_internal</STRONG> (Thumb, 268 bytes, Stack size 40 bytes, nx_nd_cache_delete_internal.o(.text._nx_nd_cache_delete_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = _nx_nd_cache_delete_internal &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_timer_system_deactivate
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_transmit_release
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_nd_cache_add_entry
</UL>

<P><STRONG><a name="[178]"></a>_nx_nd_cache_find_entry</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, nx_nd_cache_find_entry.o(.text._nx_nd_cache_find_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = _nx_nd_cache_find_entry &rArr; CHECK_IPV6_ADDRESSES_SAME
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHECK_IPV6_ADDRESSES_SAME
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_DAD_clear_NDCache_entry
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_dest_table_add
</UL>

<P><STRONG><a name="[154]"></a>_nx_packet_allocate</STRONG> (Thumb, 392 bytes, Stack size 64 bytes, nx_packet_allocate.o(.text._nx_packet_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = _nx_packet_allocate &rArr; _tx_thread_system_suspend &rArr; _tx_timer_system_activate
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_packet_allocate
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_arp_packet_send
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_data_append
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv4_send_error_message
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_send_error_message
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_copy
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_fragment_packet
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_send_ns
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_send_control
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_send_internal
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_fragment_process
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_send_rs
</UL>

<P><STRONG><a name="[196]"></a>_nx_packet_copy</STRONG> (Thumb, 310 bytes, Stack size 64 bytes, nx_packet_copy.o(.text._nx_packet_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = _nx_packet_copy &rArr; _nx_packet_data_append &rArr; _nx_packet_allocate &rArr; _tx_thread_system_suspend &rArr; _tx_timer_system_activate
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_allocate
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_release
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_data_append
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_packet_send
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_driver_packet_send
</UL>

<P><STRONG><a name="[199]"></a>_nx_packet_data_append</STRONG> (Thumb, 420 bytes, Stack size 56 bytes, nx_packet_data_append.o(.text._nx_packet_data_append))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = _nx_packet_data_append &rArr; _nx_packet_allocate &rArr; _tx_thread_system_suspend &rArr; _tx_timer_system_activate
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_allocate
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_release
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_copy
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_fragment_packet
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_send_internal
</UL>

<P><STRONG><a name="[1b0]"></a>_nx_packet_data_retrieve</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, nx_packet_data_retrieve.o(.text._nx_packet_data_retrieve))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _nx_packet_data_retrieve &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_packet_data_retrieve
</UL>

<P><STRONG><a name="[ae]"></a>_nx_packet_pool_cleanup</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, nx_packet_pool_cleanup.o(.text._nx_packet_pool_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = _nx_packet_pool_cleanup &rArr; _tx_thread_system_resume &rArr; _tx_timer_system_deactivate
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nx_packet_allocate.o(.text._nx_packet_allocate)
</UL>
<P><STRONG><a name="[1b1]"></a>_nx_packet_pool_create</STRONG> (Thumb, 416 bytes, Stack size 80 bytes, nx_packet_pool_create.o(.text._nx_packet_pool_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _nx_packet_pool_create
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_packet_pool_create
</UL>

<P><STRONG><a name="[1b3]"></a>_nx_packet_pool_initialize</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, nx_packet_pool_initialize.o(.text._nx_packet_pool_initialize))
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_system_initialize
</UL>

<P><STRONG><a name="[14f]"></a>_nx_packet_release</STRONG> (Thumb, 354 bytes, Stack size 48 bytes, nx_packet_release.o(.text._nx_packet_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_timer_system_deactivate
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_packet_release
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_rarp_packet_deferred_receive
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_arp_packet_deferred_receive
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_transmit_release
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_arp_packet_receive
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv4_packet_process
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmp_packet_receive
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_data_append
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmp_packet_process
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv4_process_echo_reply
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv4_packet_receive
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_send_error_message
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_copy
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_fragment_assembly
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_fragment_packet
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_fragment_cleanup
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_packet_receive
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_send_ns
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_receive_queue_flush
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_receive
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_packet_process
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_process
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_send_control
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_server_socket_relisten
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_transmit_queue_flush
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_data_check
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_ack_check
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_send_internal
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_data_trim_front
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_data_trim
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_udp_packet_receive
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_fragment_process
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_send_rs
</UL>

<P><STRONG><a name="[14c]"></a>_nx_packet_transmit_release</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, nx_packet_transmit_release.o(.text._nx_packet_transmit_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_timer_system_deactivate
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_release
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_packet_transmit_release
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_arp_dynamic_entry_delete
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_arp_queue_send
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_arp_periodic_update
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_packet_send
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_packet_send
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_driver_packet_send
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_fragment_packet
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_fragment_process
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_header_add
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_nd_cache_delete_internal
</UL>

<P><STRONG><a name="[16c]"></a>_nx_rarp_packet_deferred_receive</STRONG> (Thumb, 170 bytes, Stack size 48 bytes, nx_rarp_packet_deferred_receive.o(.text._nx_rarp_packet_deferred_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _nx_rarp_packet_deferred_receive &rArr; _tx_event_flags_set &rArr; _tx_thread_system_resume &rArr; _tx_timer_system_deactivate
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_event_flags_set
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_release
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_driver_transfer_to_netx
</UL>

<P><STRONG><a name="[1b2]"></a>_nx_system_initialize</STRONG> (Thumb, 234 bytes, Stack size 8 bytes, nx_system_initialize.o(.text._nx_system_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _nx_system_initialize
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_initialize
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_pool_initialize
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_1_entry
</UL>

<P><STRONG><a name="[af]"></a>_nx_tcp_cleanup_deferred</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, nx_tcp_cleanup_deferred.o(.text._nx_tcp_cleanup_deferred))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _nx_tcp_cleanup_deferred
</UL>
<BR>[Address Reference Count : 6]<UL><LI> nx_tcp_client_bind_cleanup.o(.text._nx_tcp_client_bind_cleanup)
<LI> nx_tcp_connect_cleanup.o(.text._nx_tcp_connect_cleanup)
<LI> nx_tcp_disconnect_cleanup.o(.text._nx_tcp_disconnect_cleanup)
<LI> nx_tcp_deferred_cleanup_check.o(.text._nx_tcp_deferred_cleanup_check)
<LI> nx_tcp_receive_cleanup.o(.text._nx_tcp_receive_cleanup)
<LI> nx_tcp_transmit_cleanup.o(.text._nx_tcp_transmit_cleanup)
</UL>
<P><STRONG><a name="[1b6]"></a>_nx_tcp_client_bind_cleanup</STRONG> (Thumb, 336 bytes, Stack size 64 bytes, nx_tcp_client_bind_cleanup.o(.text._nx_tcp_client_bind_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = _nx_tcp_client_bind_cleanup &rArr; _tx_event_flags_set &rArr; _tx_thread_system_resume &rArr; _tx_timer_system_deactivate
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_event_flags_set
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_deferred_cleanup_check
</UL>

<P><STRONG><a name="[b5]"></a>_nx_tcp_connect_cleanup</STRONG> (Thumb, 308 bytes, Stack size 64 bytes, nx_tcp_connect_cleanup.o(.text._nx_tcp_connect_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = _nx_tcp_connect_cleanup &rArr; _tx_event_flags_set &rArr; _tx_thread_system_resume &rArr; _tx_timer_system_deactivate
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_event_flags_set
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_connection_reset
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_deferred_cleanup_check
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_disconnect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nx_tcp_server_socket_accept.o(.text._nx_tcp_server_socket_accept)
</UL>
<P><STRONG><a name="[b3]"></a>_nx_tcp_deferred_cleanup_check</STRONG> (Thumb, 372 bytes, Stack size 32 bytes, nx_tcp_deferred_cleanup_check.o(.text._nx_tcp_deferred_cleanup_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = _nx_tcp_deferred_cleanup_check &rArr; _nx_tcp_client_bind_cleanup &rArr; _tx_event_flags_set &rArr; _tx_thread_system_resume &rArr; _tx_timer_system_deactivate
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_client_bind_cleanup
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_transmit_cleanup
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_receive_cleanup
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_disconnect_cleanup
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_connect_cleanup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nx_tcp_enable.o(.text._nx_tcp_enable)
</UL>
<P><STRONG><a name="[b6]"></a>_nx_tcp_disconnect_cleanup</STRONG> (Thumb, 268 bytes, Stack size 64 bytes, nx_tcp_disconnect_cleanup.o(.text._nx_tcp_disconnect_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = _nx_tcp_disconnect_cleanup &rArr; _tx_event_flags_set &rArr; _tx_thread_system_resume &rArr; _tx_timer_system_deactivate
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_event_flags_set
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_connection_reset
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_deferred_cleanup_check
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_server_socket_unaccept
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nx_tcp_socket_disconnect.o(.text._nx_tcp_socket_disconnect)
</UL>
<P><STRONG><a name="[1b7]"></a>_nx_tcp_enable</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, nx_tcp_enable.o(.text._nx_tcp_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = _nx_tcp_enable &rArr; _nx_ip_fast_periodic_timer_create &rArr; _tx_timer_create &rArr; _tx_timer_system_activate
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_fast_periodic_timer_create
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_tcp_enable
</UL>

<P><STRONG><a name="[b2]"></a>_nx_tcp_fast_periodic_processing</STRONG> (Thumb, 486 bytes, Stack size 32 bytes, nx_tcp_fast_periodic_processing.o(.text._nx_tcp_fast_periodic_processing))
<BR><BR>[Stack]<UL><LI>Max Depth = 1012<LI>Call Chain = _nx_tcp_fast_periodic_processing &rArr; _nx_tcp_socket_retransmit &rArr; _nx_tcp_packet_send_probe &rArr; _nx_tcp_packet_send_control &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ip_checksum_compute &rArr; _tx_thread_sleep &rArr; _tx_thread_system_suspend &rArr; _tx_timer_system_activate
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_connection_reset
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_block_cleanup
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_retransmit
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_send_syn
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_send_fin
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_send_ack
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nx_tcp_enable.o(.text._nx_tcp_enable)
</UL>
<P><STRONG><a name="[1b5]"></a>_nx_tcp_initialize</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nx_tcp_initialize.o(.text._nx_tcp_initialize))
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_system_initialize
</UL>

<P><STRONG><a name="[1c1]"></a>_nx_tcp_mss_option_get</STRONG> (Thumb, 194 bytes, Stack size 20 bytes, nx_tcp_mss_option_get.o(.text._nx_tcp_mss_option_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _nx_tcp_mss_option_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_packet_process
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_process
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_server_socket_relisten
</UL>

<P><STRONG><a name="[1be]"></a>_nx_tcp_no_connection_reset</STRONG> (Thumb, 224 bytes, Stack size 352 bytes, nx_tcp_no_connection_reset.o(.text._nx_tcp_no_connection_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 1140<LI>Call Chain = _nx_tcp_no_connection_reset &rArr; _nx_tcp_packet_send_rst &rArr; _nx_tcp_packet_send_control &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ip_checksum_compute &rArr; _tx_thread_sleep &rArr; _tx_thread_system_suspend &rArr; _tx_timer_system_activate
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_route_find
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_send_rst
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COPY_IPV6_ADDRESS
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_process
</UL>

<P><STRONG><a name="[1c0]"></a>_nx_tcp_packet_process</STRONG> (Thumb, 2344 bytes, Stack size 168 bytes, nx_tcp_packet_process.o(.text._nx_tcp_packet_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 1372<LI>Call Chain = _nx_tcp_packet_process &rArr; _nx_tcp_socket_packet_process &rArr; _nx_tcp_socket_state_ack_check &rArr; _nx_tcp_socket_retransmit &rArr; _nx_tcp_packet_send_probe &rArr; _nx_tcp_packet_send_control &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ip_checksum_compute &rArr; _tx_thread_sleep &rArr; _tx_thread_system_suspend &rArr; _tx_timer_system_activate
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_route_find
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_release
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_checksum_compute
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHECK_IPV6_ADDRESSES_SAME
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPv6_Address_Type
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_send_syn
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_mss_option_get
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_packet_process
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_no_connection_reset
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COPY_IPV6_ADDRESS
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_queue_process
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_receive
</UL>

<P><STRONG><a name="[b4]"></a>_nx_tcp_packet_receive</STRONG> (Thumb, 224 bytes, Stack size 40 bytes, nx_tcp_packet_receive.o(.text._nx_tcp_packet_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 1412<LI>Call Chain = _nx_tcp_packet_receive &rArr; _nx_tcp_packet_process &rArr; _nx_tcp_socket_packet_process &rArr; _nx_tcp_socket_state_ack_check &rArr; _nx_tcp_socket_retransmit &rArr; _nx_tcp_packet_send_probe &rArr; _nx_tcp_packet_send_control &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ip_checksum_compute &rArr; _tx_thread_sleep &rArr; _tx_thread_system_suspend &rArr; _tx_timer_system_activate
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_event_flags_set
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_release
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nx_tcp_enable.o(.text._nx_tcp_enable)
</UL>
<P><STRONG><a name="[1b8]"></a>_nx_tcp_packet_send_ack</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, nx_tcp_packet_send_ack.o(.text._nx_tcp_packet_send_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 788<LI>Call Chain = _nx_tcp_packet_send_ack &rArr; _nx_tcp_packet_send_control &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ip_checksum_compute &rArr; _tx_thread_sleep &rArr; _tx_thread_system_suspend &rArr; _tx_timer_system_activate
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_send_control
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_fast_periodic_processing
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_packet_process
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_syn_sent
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_fin_wait2
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_fin_wait1
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_established
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_data_check
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_ack_check
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_receive
</UL>

<P><STRONG><a name="[1c3]"></a>_nx_tcp_packet_send_control</STRONG> (Thumb, 954 bytes, Stack size 160 bytes, nx_tcp_packet_send_control.o(.text._nx_tcp_packet_send_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 756<LI>Call Chain = _nx_tcp_packet_send_control &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ip_checksum_compute &rArr; _tx_thread_sleep &rArr; _tx_thread_system_suspend &rArr; _tx_timer_system_activate
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_allocate
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_release
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_packet_send
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_checksum_compute
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_packet_send
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_send_syn
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_send_fin
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_send_ack
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_send_rst
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_send_probe
</UL>

<P><STRONG><a name="[1bc]"></a>_nx_tcp_packet_send_fin</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, nx_tcp_packet_send_fin.o(.text._nx_tcp_packet_send_fin))
<BR><BR>[Stack]<UL><LI>Max Depth = 788<LI>Call Chain = _nx_tcp_packet_send_fin &rArr; _nx_tcp_packet_send_control &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ip_checksum_compute &rArr; _tx_thread_sleep &rArr; _tx_thread_system_suspend &rArr; _tx_timer_system_activate
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_send_control
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_fast_periodic_processing
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_disconnect
</UL>

<P><STRONG><a name="[1c4]"></a>_nx_tcp_packet_send_probe</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, nx_tcp_packet_send_probe.o(.text._nx_tcp_packet_send_probe))
<BR><BR>[Stack]<UL><LI>Max Depth = 796<LI>Call Chain = _nx_tcp_packet_send_probe &rArr; _nx_tcp_packet_send_control &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ip_checksum_compute &rArr; _tx_thread_sleep &rArr; _tx_thread_system_suspend &rArr; _tx_timer_system_activate
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_send_control
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_retransmit
</UL>

<P><STRONG><a name="[1bf]"></a>_nx_tcp_packet_send_rst</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, nx_tcp_packet_send_rst.o(.text._nx_tcp_packet_send_rst))
<BR><BR>[Stack]<UL><LI>Max Depth = 788<LI>Call Chain = _nx_tcp_packet_send_rst &rArr; _nx_tcp_packet_send_control &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ip_checksum_compute &rArr; _tx_thread_sleep &rArr; _tx_thread_system_suspend &rArr; _tx_timer_system_activate
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_send_control
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_packet_process
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_no_connection_reset
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_disconnect
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_syn_sent
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_syn_received
</UL>

<P><STRONG><a name="[1ba]"></a>_nx_tcp_packet_send_syn</STRONG> (Thumb, 268 bytes, Stack size 40 bytes, nx_tcp_packet_send_syn.o(.text._nx_tcp_packet_send_syn))
<BR><BR>[Stack]<UL><LI>Max Depth = 796<LI>Call Chain = _nx_tcp_packet_send_syn &rArr; _nx_tcp_packet_send_control &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ip_checksum_compute &rArr; _tx_thread_sleep &rArr; _tx_thread_system_suspend &rArr; _tx_timer_system_activate
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_send_control
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_fast_periodic_processing
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_process
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_server_socket_accept
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_syn_sent
</UL>

<P><STRONG><a name="[b1]"></a>_nx_tcp_periodic_processing</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, nx_tcp_periodic_processing.o(.text._nx_tcp_periodic_processing))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _nx_tcp_periodic_processing
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nx_tcp_enable.o(.text._nx_tcp_enable)
</UL>
<P><STRONG><a name="[b0]"></a>_nx_tcp_queue_process</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, nx_tcp_queue_process.o(.text._nx_tcp_queue_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 1412<LI>Call Chain = _nx_tcp_queue_process &rArr; _nx_tcp_packet_process &rArr; _nx_tcp_socket_packet_process &rArr; _nx_tcp_socket_state_ack_check &rArr; _nx_tcp_socket_retransmit &rArr; _nx_tcp_packet_send_probe &rArr; _nx_tcp_packet_send_control &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ip_checksum_compute &rArr; _tx_thread_sleep &rArr; _tx_thread_system_suspend &rArr; _tx_timer_system_activate
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nx_tcp_enable.o(.text._nx_tcp_enable)
</UL>
<P><STRONG><a name="[b7]"></a>_nx_tcp_receive_cleanup</STRONG> (Thumb, 344 bytes, Stack size 64 bytes, nx_tcp_receive_cleanup.o(.text._nx_tcp_receive_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = _nx_tcp_receive_cleanup &rArr; _tx_event_flags_set &rArr; _tx_thread_system_resume &rArr; _tx_timer_system_deactivate
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_event_flags_set
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_connection_reset
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_deferred_cleanup_check
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_disconnect
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_established
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nx_tcp_socket_receive.o(.text._nx_tcp_socket_receive)
</UL>
<P><STRONG><a name="[1c5]"></a>_nx_tcp_server_socket_accept</STRONG> (Thumb, 472 bytes, Stack size 40 bytes, nx_tcp_server_socket_accept.o(.text._nx_tcp_server_socket_accept))
<BR><BR>[Stack]<UL><LI>Max Depth = 836<LI>Call Chain = _nx_tcp_server_socket_accept &rArr; _nx_tcp_packet_send_syn &rArr; _nx_tcp_packet_send_control &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ip_checksum_compute &rArr; _tx_thread_sleep &rArr; _tx_thread_system_suspend &rArr; _tx_timer_system_activate
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_put
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_get
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_thread_suspend
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_send_syn
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_tcp_server_socket_accept
</UL>

<P><STRONG><a name="[1c8]"></a>_nx_tcp_server_socket_listen</STRONG> (Thumb, 378 bytes, Stack size 40 bytes, nx_tcp_server_socket_listen.o(.text._nx_tcp_server_socket_listen))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = _nx_tcp_server_socket_listen &rArr; _tx_mutex_put &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_suspend &rArr; _tx_timer_system_activate
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_put
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_tcp_server_socket_listen
</UL>

<P><STRONG><a name="[1c9]"></a>_nx_tcp_server_socket_relisten</STRONG> (Thumb, 802 bytes, Stack size 104 bytes, nx_tcp_server_socket_relisten.o(.text._nx_tcp_server_socket_relisten))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = _nx_tcp_server_socket_relisten &rArr; _tx_mutex_put &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_suspend &rArr; _tx_timer_system_activate
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_put
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_get
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_route_find
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_release
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_mss_option_get
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COPY_IPV6_ADDRESS
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_tcp_server_socket_relisten
</UL>

<P><STRONG><a name="[1ca]"></a>_nx_tcp_server_socket_unaccept</STRONG> (Thumb, 410 bytes, Stack size 40 bytes, nx_tcp_server_socket_unaccept.o(.text._nx_tcp_server_socket_unaccept))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = _nx_tcp_server_socket_unaccept &rArr; _tx_mutex_put &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_suspend &rArr; _tx_timer_system_activate
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_put
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_get
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_receive_queue_flush
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_disconnect_cleanup
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_UNSPECIFIED_ADDRESS
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_tcp_server_socket_unaccept
</UL>

<P><STRONG><a name="[1bd]"></a>_nx_tcp_socket_block_cleanup</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, nx_tcp_socket_block_cleanup.o(.text._nx_tcp_socket_block_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _nx_tcp_socket_block_cleanup &rArr; SET_UNSPECIFIED_ADDRESS
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_UNSPECIFIED_ADDRESS
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_connection_reset
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_fast_periodic_processing
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_disconnect
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_last_ack
</UL>

<P><STRONG><a name="[1b9]"></a>_nx_tcp_socket_connection_reset</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, nx_tcp_socket_connection_reset.o(.text._nx_tcp_socket_connection_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = _nx_tcp_socket_connection_reset &rArr; _nx_tcp_transmit_cleanup &rArr; _tx_event_flags_set &rArr; _tx_thread_system_resume &rArr; _tx_timer_system_deactivate
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_receive_queue_flush
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_block_cleanup
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_transmit_cleanup
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_receive_cleanup
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_disconnect_cleanup
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_connect_cleanup
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_transmit_queue_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_fast_periodic_processing
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_packet_process
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_syn_sent
</UL>

<P><STRONG><a name="[1cd]"></a>_nx_tcp_socket_create</STRONG> (Thumb, 418 bytes, Stack size 80 bytes, nx_tcp_socket_create.o(.text._nx_tcp_socket_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = _nx_tcp_socket_create &rArr; _tx_mutex_put &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_suspend &rArr; _tx_timer_system_activate
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_put
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_get
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_tcp_socket_create
</UL>

<P><STRONG><a name="[1ce]"></a>_nx_tcp_socket_disconnect</STRONG> (Thumb, 704 bytes, Stack size 56 bytes, nx_tcp_socket_disconnect.o(.text._nx_tcp_socket_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 844<LI>Call Chain = _nx_tcp_socket_disconnect &rArr; _nx_tcp_packet_send_fin &rArr; _nx_tcp_packet_send_control &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ip_checksum_compute &rArr; _tx_thread_sleep &rArr; _tx_thread_system_suspend &rArr; _tx_timer_system_activate
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_put
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_get
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_thread_suspend
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_block_cleanup
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_transmit_cleanup
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_receive_cleanup
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_connect_cleanup
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_send_fin
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_send_rst
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_transmit_queue_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_tcp_socket_disconnect
</UL>

<P><STRONG><a name="[1cf]"></a>_nx_tcp_socket_info_get</STRONG> (Thumb, 382 bytes, Stack size 88 bytes, nx_tcp_socket_info_get.o(.text._nx_tcp_socket_info_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = _nx_tcp_socket_info_get &rArr; _tx_mutex_put &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_suspend &rArr; _tx_timer_system_activate
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_put
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_tcp_socket_info_get
</UL>

<P><STRONG><a name="[1c2]"></a>_nx_tcp_socket_packet_process</STRONG> (Thumb, 852 bytes, Stack size 80 bytes, nx_tcp_socket_packet_process.o(.text._nx_tcp_socket_packet_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 1204<LI>Call Chain = _nx_tcp_socket_packet_process &rArr; _nx_tcp_socket_state_ack_check &rArr; _nx_tcp_socket_retransmit &rArr; _nx_tcp_packet_send_probe &rArr; _nx_tcp_packet_send_control &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ip_checksum_compute &rArr; _tx_thread_sleep &rArr; _tx_thread_system_suspend &rArr; _tx_timer_system_activate
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_release
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_connection_reset
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_send_ack
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_mss_option_get
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_send_rst
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_transmit_check
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_syn_sent
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_syn_received
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_last_ack
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_fin_wait2
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_fin_wait1
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_established
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_data_check
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_closing
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_ack_check
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_process
</UL>

<P><STRONG><a name="[1da]"></a>_nx_tcp_socket_receive</STRONG> (Thumb, 540 bytes, Stack size 56 bytes, nx_tcp_socket_receive.o(.text._nx_tcp_socket_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 844<LI>Call Chain = _nx_tcp_socket_receive &rArr; _nx_tcp_packet_send_ack &rArr; _nx_tcp_packet_send_control &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ip_checksum_compute &rArr; _tx_thread_sleep &rArr; _tx_thread_system_suspend &rArr; _tx_timer_system_activate
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_put
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_get
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_thread_suspend
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_send_ack
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_tcp_socket_receive
</UL>

<P><STRONG><a name="[1cb]"></a>_nx_tcp_socket_receive_queue_flush</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, nx_tcp_socket_receive_queue_flush.o(.text._nx_tcp_socket_receive_queue_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = _nx_tcp_socket_receive_queue_flush &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_timer_system_deactivate
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_release
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_connection_reset
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_server_socket_unaccept
</UL>

<P><STRONG><a name="[1bb]"></a>_nx_tcp_socket_retransmit</STRONG> (Thumb, 1324 bytes, Stack size 184 bytes, nx_tcp_socket_retransmit.o(.text._nx_tcp_socket_retransmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 980<LI>Call Chain = _nx_tcp_socket_retransmit &rArr; _nx_tcp_packet_send_probe &rArr; _nx_tcp_packet_send_control &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ip_checksum_compute &rArr; _tx_thread_sleep &rArr; _tx_thread_system_suspend &rArr; _tx_timer_system_activate
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_packet_send
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_checksum_compute
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_packet_send
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_send_probe
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_fast_periodic_processing
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_ack_check
</UL>

<P><STRONG><a name="[1db]"></a>_nx_tcp_socket_send</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, nx_tcp_socket_send.o(.text._nx_tcp_socket_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 900<LI>Call Chain = _nx_tcp_socket_send &rArr; _nx_tcp_socket_send_internal &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ip_checksum_compute &rArr; _tx_thread_sleep &rArr; _tx_thread_system_suspend &rArr; _tx_timer_system_activate
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_send_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_tcp_socket_send
</UL>

<P><STRONG><a name="[1dc]"></a>_nx_tcp_socket_send_internal</STRONG> (Thumb, 2766 bytes, Stack size 280 bytes, nx_tcp_socket_send_internal.o(.text._nx_tcp_socket_send_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 876<LI>Call Chain = _nx_tcp_socket_send_internal &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ip_checksum_compute &rArr; _tx_thread_sleep &rArr; _tx_thread_system_suspend &rArr; _tx_timer_system_activate
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_sleep
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_put
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_get
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_allocate
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_release
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_data_append
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_packet_send
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_checksum_compute
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_packet_send
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_preemption_change
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_thread_suspend
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_info_get
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_send
</UL>

<P><STRONG><a name="[1d0]"></a>_nx_tcp_socket_state_ack_check</STRONG> (Thumb, 1788 bytes, Stack size 144 bytes, nx_tcp_socket_state_ack_check.o(.text._nx_tcp_socket_state_ack_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 1124<LI>Call Chain = _nx_tcp_socket_state_ack_check &rArr; _nx_tcp_socket_retransmit &rArr; _nx_tcp_packet_send_probe &rArr; _nx_tcp_packet_send_control &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ip_checksum_compute &rArr; _tx_thread_sleep &rArr; _tx_thread_system_suspend &rArr; _tx_timer_system_activate
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_release
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_retransmit
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_send_ack
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_packet_process
</UL>

<P><STRONG><a name="[1d9]"></a>_nx_tcp_socket_state_closing</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, nx_tcp_socket_state_closing.o(.text._nx_tcp_socket_state_closing))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = _nx_tcp_socket_state_closing &rArr; _nx_tcp_socket_thread_resume &rArr; _tx_thread_system_resume &rArr; _tx_timer_system_deactivate
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_thread_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_packet_process
</UL>

<P><STRONG><a name="[1d2]"></a>_nx_tcp_socket_state_data_check</STRONG> (Thumb, 1736 bytes, Stack size 104 bytes, nx_tcp_socket_state_data_check.o(.text._nx_tcp_socket_state_data_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 892<LI>Call Chain = _nx_tcp_socket_state_data_check &rArr; _nx_tcp_packet_send_ack &rArr; _nx_tcp_packet_send_control &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ip_checksum_compute &rArr; _tx_thread_sleep &rArr; _tx_thread_system_suspend &rArr; _tx_timer_system_activate
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_release
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_thread_resume
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_send_ack
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_data_trim_front
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_data_trim
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_packet_process
</UL>

<P><STRONG><a name="[1e1]"></a>_nx_tcp_socket_state_data_trim</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, nx_tcp_socket_state_data_check.o(.text._nx_tcp_socket_state_data_trim))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = _nx_tcp_socket_state_data_trim &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_timer_system_deactivate
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_release
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_data_check
</UL>

<P><STRONG><a name="[1e0]"></a>_nx_tcp_socket_state_data_trim_front</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, nx_tcp_socket_state_data_check.o(.text._nx_tcp_socket_state_data_trim_front))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = _nx_tcp_socket_state_data_trim_front &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_timer_system_deactivate
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_release
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_data_check
</UL>

<P><STRONG><a name="[1d4]"></a>_nx_tcp_socket_state_established</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, nx_tcp_socket_state_established.o(.text._nx_tcp_socket_state_established))
<BR><BR>[Stack]<UL><LI>Max Depth = 804<LI>Call Chain = _nx_tcp_socket_state_established &rArr; _nx_tcp_packet_send_ack &rArr; _nx_tcp_packet_send_control &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ip_checksum_compute &rArr; _tx_thread_sleep &rArr; _tx_thread_system_suspend &rArr; _tx_timer_system_activate
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_receive_cleanup
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_send_ack
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_packet_process
</UL>

<P><STRONG><a name="[1d7]"></a>_nx_tcp_socket_state_fin_wait1</STRONG> (Thumb, 214 bytes, Stack size 16 bytes, nx_tcp_socket_state_fin_wait1.o(.text._nx_tcp_socket_state_fin_wait1))
<BR><BR>[Stack]<UL><LI>Max Depth = 804<LI>Call Chain = _nx_tcp_socket_state_fin_wait1 &rArr; _nx_tcp_packet_send_ack &rArr; _nx_tcp_packet_send_control &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ip_checksum_compute &rArr; _tx_thread_sleep &rArr; _tx_thread_system_suspend &rArr; _tx_timer_system_activate
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_thread_resume
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_send_ack
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_packet_process
</UL>

<P><STRONG><a name="[1d8]"></a>_nx_tcp_socket_state_fin_wait2</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, nx_tcp_socket_state_fin_wait2.o(.text._nx_tcp_socket_state_fin_wait2))
<BR><BR>[Stack]<UL><LI>Max Depth = 804<LI>Call Chain = _nx_tcp_socket_state_fin_wait2 &rArr; _nx_tcp_packet_send_ack &rArr; _nx_tcp_packet_send_control &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ip_checksum_compute &rArr; _tx_thread_sleep &rArr; _tx_thread_system_suspend &rArr; _tx_timer_system_activate
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_thread_resume
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_send_ack
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_packet_process
</UL>

<P><STRONG><a name="[1d6]"></a>_nx_tcp_socket_state_last_ack</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, nx_tcp_socket_state_last_ack.o(.text._nx_tcp_socket_state_last_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = _nx_tcp_socket_state_last_ack &rArr; _nx_tcp_socket_thread_resume &rArr; _tx_thread_system_resume &rArr; _tx_timer_system_deactivate
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_thread_resume
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_block_cleanup
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_packet_process
</UL>

<P><STRONG><a name="[1d3]"></a>_nx_tcp_socket_state_syn_received</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, nx_tcp_socket_state_syn_received.o(.text._nx_tcp_socket_state_syn_received))
<BR><BR>[Stack]<UL><LI>Max Depth = 804<LI>Call Chain = _nx_tcp_socket_state_syn_received &rArr; _nx_tcp_packet_send_rst &rArr; _nx_tcp_packet_send_control &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ip_checksum_compute &rArr; _tx_thread_sleep &rArr; _tx_thread_system_suspend &rArr; _tx_timer_system_activate
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_thread_resume
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_send_rst
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_packet_process
</UL>

<P><STRONG><a name="[1d1]"></a>_nx_tcp_socket_state_syn_sent</STRONG> (Thumb, 454 bytes, Stack size 24 bytes, nx_tcp_socket_state_syn_sent.o(.text._nx_tcp_socket_state_syn_sent))
<BR><BR>[Stack]<UL><LI>Max Depth = 820<LI>Call Chain = _nx_tcp_socket_state_syn_sent &rArr; _nx_tcp_packet_send_syn &rArr; _nx_tcp_packet_send_control &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ip_checksum_compute &rArr; _tx_thread_sleep &rArr; _tx_thread_system_suspend &rArr; _tx_timer_system_activate
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_connection_reset
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_thread_resume
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_send_syn
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_send_ack
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_send_rst
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_packet_process
</UL>

<P><STRONG><a name="[1d5]"></a>_nx_tcp_socket_state_transmit_check</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, nx_tcp_socket_state_transmit_check.o(.text._nx_tcp_socket_state_transmit_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = _nx_tcp_socket_state_transmit_check &rArr; _nx_tcp_socket_thread_resume &rArr; _tx_thread_system_resume &rArr; _tx_timer_system_deactivate
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_thread_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_packet_process
</UL>

<P><STRONG><a name="[1dd]"></a>_nx_tcp_socket_state_wait</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, nx_tcp_socket_state_wait.o(.text._nx_tcp_socket_state_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = _nx_tcp_socket_state_wait &rArr; _tx_thread_sleep &rArr; _tx_thread_system_suspend &rArr; _tx_timer_system_activate
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_send_internal
</UL>

<P><STRONG><a name="[1df]"></a>_nx_tcp_socket_thread_resume</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, nx_tcp_socket_thread_resume.o(.text._nx_tcp_socket_thread_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = _nx_tcp_socket_thread_resume &rArr; _tx_thread_system_resume &rArr; _tx_timer_system_deactivate
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_transmit_check
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_syn_sent
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_syn_received
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_last_ack
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_fin_wait2
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_fin_wait1
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_data_check
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_closing
</UL>

<P><STRONG><a name="[1c7]"></a>_nx_tcp_socket_thread_suspend</STRONG> (Thumb, 182 bytes, Stack size 48 bytes, nx_tcp_socket_thread_suspend.o(.text._nx_tcp_socket_thread_suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = _nx_tcp_socket_thread_suspend &rArr; _tx_mutex_put &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_suspend &rArr; _tx_timer_system_activate
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_put
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_server_socket_accept
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_disconnect
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_receive
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_send_internal
</UL>

<P><STRONG><a name="[1cc]"></a>_nx_tcp_socket_transmit_queue_flush</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, nx_tcp_socket_transmit_queue_flush.o(.text._nx_tcp_socket_transmit_queue_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = _nx_tcp_socket_transmit_queue_flush &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_timer_system_deactivate
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_release
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_connection_reset
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_disconnect
</UL>

<P><STRONG><a name="[b8]"></a>_nx_tcp_transmit_cleanup</STRONG> (Thumb, 372 bytes, Stack size 64 bytes, nx_tcp_transmit_cleanup.o(.text._nx_tcp_transmit_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = _nx_tcp_transmit_cleanup &rArr; _tx_event_flags_set &rArr; _tx_thread_system_resume &rArr; _tx_timer_system_deactivate
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_event_flags_set
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_connection_reset
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_deferred_cleanup_check
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_disconnect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nx_tcp_socket_send_internal.o(.text._nx_tcp_socket_send_internal)
</UL>
<P><STRONG><a name="[1f7]"></a>_nx_udp_enable</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, nx_udp_enable.o(.text._nx_udp_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _nx_udp_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_udp_enable
</UL>

<P><STRONG><a name="[b9]"></a>_nx_udp_packet_receive</STRONG> (Thumb, 1556 bytes, Stack size 176 bytes, nx_udp_packet_receive.o(.text._nx_udp_packet_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 876<LI>Call Chain = _nx_udp_packet_receive &rArr; _nx_icmpv6_send_error_message &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ip_checksum_compute &rArr; _tx_thread_sleep &rArr; _tx_thread_system_suspend &rArr; _tx_timer_system_activate
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_put
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_get
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_release
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv4_send_error_message
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_send_error_message
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nx_udp_enable.o(.text._nx_udp_enable)
</UL>
<P><STRONG><a name="[1f9]"></a>_nx_udp_source_extract</STRONG> (Thumb, 44 bytes, Stack size 20 bytes, nx_udp_source_extract.o(.text._nx_udp_source_extract))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _nx_udp_source_extract
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_udp_source_extract
</UL>

<P><STRONG><a name="[1e3]"></a>_nxd_ipv6_find_max_prefix_length</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, nxd_ipv6_find_max_prefix_length.o(.text._nxd_ipv6_find_max_prefix_length))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _nxd_ipv6_find_max_prefix_length
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxd_ipv6_interface_find
</UL>

<P><STRONG><a name="[183]"></a>_nxd_ipv6_interface_find</STRONG> (Thumb, 664 bytes, Stack size 64 bytes, nxd_ipv6_interface_find.o(.text._nxd_ipv6_interface_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = _nxd_ipv6_interface_find &rArr; _tx_thread_sleep &rArr; _tx_thread_system_suspend &rArr; _tx_timer_system_activate
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_sleep
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHECK_IPV6_ADDRESSES_SAME
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPv6_Address_Type
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxd_ipv6_find_max_prefix_length
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_send_error_message
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_send_rs
</UL>

<P><STRONG><a name="[1a0]"></a>_nxd_ipv6_prefix_router_timer_tick</STRONG> (Thumb, 272 bytes, Stack size 40 bytes, nxd_ipv6_prefix_router_timer_tick.o(.text._nxd_ipv6_prefix_router_timer_tick))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = _nxd_ipv6_prefix_router_timer_tick &rArr; _nx_ipv6_prefix_list_delete_entry &rArr; _nx_ipv6_multicast_leave &rArr; _tx_mutex_put &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_suspend &rArr; _tx_timer_system_activate
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_invalidate_destination_entry
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_prefix_list_delete_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_thread_entry
</UL>

<P><STRONG><a name="[1ab]"></a>_nxd_ipv6_router_lookup</STRONG> (Thumb, 412 bytes, Stack size 56 bytes, nxd_ipv6_router_lookup.o(.text._nxd_ipv6_router_lookup))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = _nxd_ipv6_router_lookup &rArr; _tx_thread_sleep &rArr; _tx_thread_system_suspend &rArr; _tx_timer_system_activate
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_sleep
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COPY_IPV6_ADDRESS
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_packet_send
</UL>

<P><STRONG><a name="[1a1]"></a>_nxd_ipv6_router_solicitation_check</STRONG> (Thumb, 212 bytes, Stack size 16 bytes, nxd_ipv6_router_solicitation_check.o(.text._nxd_ipv6_router_solicitation_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 676<LI>Call Chain = _nxd_ipv6_router_solicitation_check &rArr; _nx_icmpv6_send_rs &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ip_checksum_compute &rArr; _tx_thread_sleep &rArr; _tx_thread_system_suspend &rArr; _tx_timer_system_activate
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_send_rs
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_thread_entry
</UL>

<P><STRONG><a name="[1aa]"></a>_nxd_ipv6_search_onlink</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, nxd_ipv6_search_onlink.o(.text._nxd_ipv6_search_onlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = _nxd_ipv6_search_onlink &rArr; CHECK_IP_ADDRESSES_BY_PREFIX &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPv6_Address_Type
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHECK_IP_ADDRESSES_BY_PREFIX
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_packet_send
</UL>

<P><STRONG><a name="[1e4]"></a>_nxe_arp_enable</STRONG> (Thumb, 190 bytes, Stack size 40 bytes, nxe_arp_enable.o(.text._nxe_arp_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _nxe_arp_enable &rArr; _nx_arp_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_arp_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_1_entry
</UL>

<P><STRONG><a name="[1e5]"></a>_nxe_icmp_enable</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, nxe_icmp_enable.o(.text._nxe_icmp_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = _nxe_icmp_enable &rArr; _nx_icmp_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmp_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_1_entry
</UL>

<P><STRONG><a name="[1e7]"></a>_nxe_ip_create</STRONG> (Thumb, 516 bytes, Stack size 96 bytes, nxe_ip_create.o(.text._nxe_ip_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = _nxe_ip_create &rArr; _nx_ip_create &rArr; _tx_thread_create &rArr; _tx_thread_system_resume &rArr; _tx_timer_system_deactivate
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_preemption_change
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_identify
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_create
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_1_entry
</UL>

<P><STRONG><a name="[1e8]"></a>_nxe_ip_fragment_enable</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, nxe_ip_fragment_enable.o(.text._nxe_ip_fragment_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _nxe_ip_fragment_enable &rArr; _nx_ip_fragment_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_fragment_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_1_entry
</UL>

<P><STRONG><a name="[103]"></a>_nxe_packet_allocate</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, nxe_packet_allocate.o(.text._nxe_packet_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = _nxe_packet_allocate &rArr; _nx_packet_allocate &rArr; _tx_thread_system_suspend &rArr; _tx_timer_system_activate
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_RxAllocateCallback
</UL>

<P><STRONG><a name="[1ea]"></a>_nxe_packet_data_retrieve</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, nxe_packet_data_retrieve.o(.text._nxe_packet_data_retrieve))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _nxe_packet_data_retrieve &rArr; _nx_packet_data_retrieve &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_data_retrieve
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_1_entry
</UL>

<P><STRONG><a name="[1eb]"></a>_nxe_packet_pool_create</STRONG> (Thumb, 470 bytes, Stack size 88 bytes, nxe_packet_pool_create.o(.text._nxe_packet_pool_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = _nxe_packet_pool_create &rArr; _tx_thread_preemption_change &rArr; _tx_thread_system_preempt_check
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_preemption_change
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_identify
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_pool_create
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_1_entry
</UL>

<P><STRONG><a name="[16d]"></a>_nxe_packet_release</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, nxe_packet_release.o(.text._nxe_packet_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = _nxe_packet_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_timer_system_deactivate
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_release
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_1_entry
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_driver_transfer_to_netx
</UL>

<P><STRONG><a name="[10a]"></a>_nxe_packet_transmit_release</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, nxe_packet_transmit_release.o(.text._nxe_packet_transmit_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = _nxe_packet_transmit_release &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_timer_system_deactivate
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_transmit_release
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_TxFreeCallback
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_driver_packet_send
</UL>

<P><STRONG><a name="[1ec]"></a>_nxe_tcp_enable</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, nxe_tcp_enable.o(.text._nxe_tcp_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = _nxe_tcp_enable &rArr; _nx_tcp_enable &rArr; _nx_ip_fast_periodic_timer_create &rArr; _tx_timer_create &rArr; _tx_timer_system_activate
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_1_entry
</UL>

<P><STRONG><a name="[1ed]"></a>_nxe_tcp_server_socket_accept</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, nxe_tcp_server_socket_accept.o(.text._nxe_tcp_server_socket_accept))
<BR><BR>[Stack]<UL><LI>Max Depth = 868<LI>Call Chain = _nxe_tcp_server_socket_accept &rArr; _nx_tcp_server_socket_accept &rArr; _nx_tcp_packet_send_syn &rArr; _nx_tcp_packet_send_control &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ip_checksum_compute &rArr; _tx_thread_sleep &rArr; _tx_thread_system_suspend &rArr; _tx_timer_system_activate
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_server_socket_accept
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_1_entry
</UL>

<P><STRONG><a name="[1ee]"></a>_nxe_tcp_server_socket_listen</STRONG> (Thumb, 224 bytes, Stack size 40 bytes, nxe_tcp_server_socket_listen.o(.text._nxe_tcp_server_socket_listen))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = _nxe_tcp_server_socket_listen &rArr; _nx_tcp_server_socket_listen &rArr; _tx_mutex_put &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_suspend &rArr; _tx_timer_system_activate
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_server_socket_listen
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_1_entry
</UL>

<P><STRONG><a name="[1ef]"></a>_nxe_tcp_server_socket_relisten</STRONG> (Thumb, 206 bytes, Stack size 32 bytes, nxe_tcp_server_socket_relisten.o(.text._nxe_tcp_server_socket_relisten))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = _nxe_tcp_server_socket_relisten &rArr; _nx_tcp_server_socket_relisten &rArr; _tx_mutex_put &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_suspend &rArr; _tx_timer_system_activate
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_server_socket_relisten
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_1_entry
</UL>

<P><STRONG><a name="[1f0]"></a>_nxe_tcp_server_socket_unaccept</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, nxe_tcp_server_socket_unaccept.o(.text._nxe_tcp_server_socket_unaccept))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = _nxe_tcp_server_socket_unaccept &rArr; _nx_tcp_server_socket_unaccept &rArr; _tx_mutex_put &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_suspend &rArr; _tx_timer_system_activate
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_server_socket_unaccept
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_1_entry
</UL>

<P><STRONG><a name="[1f1]"></a>_nxe_tcp_socket_create</STRONG> (Thumb, 414 bytes, Stack size 80 bytes, nxe_tcp_socket_create.o(.text._nxe_tcp_socket_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = _nxe_tcp_socket_create &rArr; _nx_tcp_socket_create &rArr; _tx_mutex_put &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_suspend &rArr; _tx_timer_system_activate
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_put
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_get
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_create
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_1_entry
</UL>

<P><STRONG><a name="[1f2]"></a>_nxe_tcp_socket_disconnect</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, nxe_tcp_socket_disconnect.o(.text._nxe_tcp_socket_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 876<LI>Call Chain = _nxe_tcp_socket_disconnect &rArr; _nx_tcp_socket_disconnect &rArr; _nx_tcp_packet_send_fin &rArr; _nx_tcp_packet_send_control &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ip_checksum_compute &rArr; _tx_thread_sleep &rArr; _tx_thread_system_suspend &rArr; _tx_timer_system_activate
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_disconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_1_entry
</UL>

<P><STRONG><a name="[1f3]"></a>_nxe_tcp_socket_info_get</STRONG> (Thumb, 262 bytes, Stack size 96 bytes, nxe_tcp_socket_info_get.o(.text._nxe_tcp_socket_info_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 564<LI>Call Chain = _nxe_tcp_socket_info_get &rArr; _nx_tcp_socket_info_get &rArr; _tx_mutex_put &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_suspend &rArr; _tx_timer_system_activate
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_info_get
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_1_entry
</UL>

<P><STRONG><a name="[1f4]"></a>_nxe_tcp_socket_receive</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, nxe_tcp_socket_receive.o(.text._nxe_tcp_socket_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 876<LI>Call Chain = _nxe_tcp_socket_receive &rArr; _nx_tcp_socket_receive &rArr; _nx_tcp_packet_send_ack &rArr; _nx_tcp_packet_send_control &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ip_checksum_compute &rArr; _tx_thread_sleep &rArr; _tx_thread_system_suspend &rArr; _tx_timer_system_activate
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_1_entry
</UL>

<P><STRONG><a name="[1f5]"></a>_nxe_tcp_socket_send</STRONG> (Thumb, 322 bytes, Stack size 40 bytes, nxe_tcp_socket_send.o(.text._nxe_tcp_socket_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 940<LI>Call Chain = _nxe_tcp_socket_send &rArr; _nx_tcp_socket_send &rArr; _nx_tcp_socket_send_internal &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ip_checksum_compute &rArr; _tx_thread_sleep &rArr; _tx_thread_system_suspend &rArr; _tx_timer_system_activate
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_send
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_1_entry
</UL>

<P><STRONG><a name="[1f6]"></a>_nxe_udp_enable</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, nxe_udp_enable.o(.text._nxe_udp_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = _nxe_udp_enable &rArr; _nx_udp_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_udp_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_1_entry
</UL>

<P><STRONG><a name="[1f8]"></a>_nxe_udp_source_extract</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, nxe_udp_source_extract.o(.text._nxe_udp_source_extract))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _nxe_udp_source_extract &rArr; _nx_udp_source_extract
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_udp_source_extract
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_1_entry
</UL>

<P><STRONG><a name="[1fa]"></a>_tx_byte_pool_create</STRONG> (Thumb, 306 bytes, Stack size 64 bytes, tx_byte_pool_create.o(.text._tx_byte_pool_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _tx_byte_pool_create
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_byte_pool_create
</UL>

<P><STRONG><a name="[ba]"></a>_tx_event_flags_cleanup</STRONG> (Thumb, 296 bytes, Stack size 64 bytes, tx_event_flags_cleanup.o(.text._tx_event_flags_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = _tx_event_flags_cleanup &rArr; _tx_thread_system_resume &rArr; _tx_timer_system_deactivate
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
</UL>
<BR>[Address Reference Count : 2]<UL><LI> tx_event_flags_cleanup.o(.text._tx_event_flags_cleanup)
<LI> tx_event_flags_get.o(.text._tx_event_flags_get)
</UL>
<P><STRONG><a name="[18c]"></a>_tx_event_flags_create</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, tx_event_flags_create.o(.text._tx_event_flags_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _tx_event_flags_create
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_create
</UL>

<P><STRONG><a name="[19f]"></a>_tx_event_flags_get</STRONG> (Thumb, 484 bytes, Stack size 96 bytes, tx_event_flags_get.o(.text._tx_event_flags_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = _tx_event_flags_get &rArr; _tx_thread_system_suspend &rArr; _tx_timer_system_activate
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_thread_entry
</UL>

<P><STRONG><a name="[150]"></a>_tx_event_flags_set</STRONG> (Thumb, 984 bytes, Stack size 160 bytes, tx_event_flags_set.o(.text._tx_event_flags_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = _tx_event_flags_set &rArr; _tx_thread_system_resume &rArr; _tx_timer_system_deactivate
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_preempt_check
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_rarp_packet_deferred_receive
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_packet_deferred_receive
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_driver_deferred_processing
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_arp_packet_deferred_receive
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmp_packet_receive
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv4_packet_receive
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_periodic_timer_entry
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_process_fragment_option
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_fast_periodic_timer_entry
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_client_bind_cleanup
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_transmit_cleanup
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_receive_cleanup
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_disconnect_cleanup
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_connect_cleanup
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_packet_receive
</UL>

<P><STRONG><a name="[1fb]"></a>_tx_initialize_high_level</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, tx_initialize_high_level.o(.text._tx_initialize_high_level))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = _tx_initialize_high_level &rArr; _tx_timer_initialize &rArr; _tx_thread_create &rArr; _tx_thread_system_resume &rArr; _tx_timer_system_deactivate
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_initialize
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_initialize_kernel_enter
</UL>

<P><STRONG><a name="[146]"></a>_tx_initialize_kernel_enter</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, tx_initialize_kernel_enter.o(.text._tx_initialize_kernel_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = _tx_initialize_kernel_enter &rArr; tx_application_define &rArr; App_ThreadX_Init &rArr; _txe_thread_create &rArr; _tx_thread_create &rArr; _tx_thread_system_resume &rArr; _tx_timer_system_deactivate
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_initialize_low_level
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_application_define
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_schedule
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_initialize_high_level
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ThreadX_Init
</UL>

<P><STRONG><a name="[bb]"></a>_tx_mutex_cleanup</STRONG> (Thumb, 270 bytes, Stack size 64 bytes, tx_mutex_cleanup.o(.text._tx_mutex_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = _tx_mutex_cleanup &rArr; _tx_thread_system_resume &rArr; _tx_timer_system_deactivate
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
</UL>
<BR>[Address Reference Count : 2]<UL><LI> tx_mutex_cleanup.o(.text._tx_mutex_cleanup)
<LI> tx_mutex_get.o(.text._tx_mutex_get)
</UL>
<P><STRONG><a name="[18b]"></a>_tx_mutex_create</STRONG> (Thumb, 188 bytes, Stack size 48 bytes, tx_mutex_create.o(.text._tx_mutex_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _tx_mutex_create
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_create
</UL>

<P><STRONG><a name="[19c]"></a>_tx_mutex_get</STRONG> (Thumb, 550 bytes, Stack size 80 bytes, tx_mutex_get.o(.text._tx_mutex_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_suspend &rArr; _tx_timer_system_activate
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_suspend
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_priority_change
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_tcp_socket_create
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_thread_entry
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_multicast_join
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_server_socket_accept
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_server_socket_listen
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_server_socket_unaccept
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_server_socket_relisten
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_create
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_disconnect
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_info_get
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_receive
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_send_internal
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_udp_packet_receive
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_multicast_leave
</UL>

<P><STRONG><a name="[202]"></a>_tx_mutex_prioritize</STRONG> (Thumb, 388 bytes, Stack size 80 bytes, tx_mutex_prioritize.o(.text._tx_mutex_prioritize))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = _tx_mutex_prioritize &rArr; _tx_thread_system_preempt_check
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_preempt_check
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_put
</UL>

<P><STRONG><a name="[201]"></a>_tx_mutex_priority_change</STRONG> (Thumb, 428 bytes, Stack size 72 bytes, tx_mutex_priority_change.o(.text._tx_mutex_priority_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = _tx_mutex_priority_change &rArr; _tx_thread_system_suspend &rArr; _tx_timer_system_activate
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_put
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_get
</UL>

<P><STRONG><a name="[19e]"></a>_tx_mutex_put</STRONG> (Thumb, 1074 bytes, Stack size 160 bytes, tx_mutex_put.o(.text._tx_mutex_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = _tx_mutex_put &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_suspend &rArr; _tx_timer_system_activate
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_preempt_check
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_prioritize
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_priority_change
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_tcp_socket_create
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_thread_entry
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_multicast_join
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_thread_suspend
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_server_socket_accept
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_server_socket_listen
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_server_socket_unaccept
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_server_socket_relisten
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_create
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_disconnect
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_info_get
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_receive
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_send_internal
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_udp_packet_receive
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_multicast_leave
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_thread_release
</UL>

<P><STRONG><a name="[bc]"></a>_tx_mutex_thread_release</STRONG> (Thumb, 140 bytes, Stack size 48 bytes, tx_mutex_cleanup.o(.text._tx_mutex_thread_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = _tx_mutex_thread_release &rArr; _tx_mutex_put &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_suspend &rArr; _tx_timer_system_activate
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_put
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tx_mutex_create.o(.text._tx_mutex_create)
</UL>
<P><STRONG><a name="[bd]"></a>_tx_semaphore_cleanup</STRONG> (Thumb, 270 bytes, Stack size 64 bytes, tx_semaphore_cleanup.o(.text._tx_semaphore_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = _tx_semaphore_cleanup &rArr; _tx_thread_system_resume &rArr; _tx_timer_system_deactivate
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
</UL>
<BR>[Address Reference Count : 2]<UL><LI> tx_semaphore_get.o(.text._tx_semaphore_get)
<LI> tx_semaphore_cleanup.o(.text._tx_semaphore_cleanup)
</UL>
<P><STRONG><a name="[20a]"></a>_tx_semaphore_create</STRONG> (Thumb, 178 bytes, Stack size 36 bytes, tx_semaphore_create.o(.text._tx_semaphore_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = _tx_semaphore_create
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_semaphore_create
</UL>

<P><STRONG><a name="[203]"></a>_tx_semaphore_get</STRONG> (Thumb, 296 bytes, Stack size 64 bytes, tx_semaphore_get.o(.text._tx_semaphore_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = _tx_semaphore_get &rArr; _tx_thread_system_suspend &rArr; _tx_timer_system_activate
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_semaphore_get
</UL>

<P><STRONG><a name="[204]"></a>_tx_semaphore_put</STRONG> (Thumb, 172 bytes, Stack size 48 bytes, tx_semaphore_put.o(.text._tx_semaphore_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _tx_semaphore_put &rArr; _tx_thread_system_resume &rArr; _tx_timer_system_deactivate
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_semaphore_put
</UL>

<P><STRONG><a name="[18f]"></a>_tx_thread_create</STRONG> (Thumb, 552 bytes, Stack size 120 bytes, tx_thread_create.o(.text._tx_thread_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = _tx_thread_create &rArr; _tx_thread_system_resume &rArr; _tx_timer_system_deactivate
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_preempt_check
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_stack_build
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_thread_create
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_create
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_initialize
</UL>

<P><STRONG><a name="[18d]"></a>_tx_thread_identify</STRONG> (Thumb, 46 bytes, Stack size 20 bytes, tx_thread_identify.o(.text._tx_thread_identify))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _tx_thread_identify
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_packet_pool_create
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_ip_create
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_create
</UL>

<P><STRONG><a name="[1de]"></a>_tx_thread_info_get</STRONG> (Thumb, 208 bytes, Stack size 48 bytes, tx_thread_info_get.o(.text._tx_thread_info_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _tx_thread_info_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_send_internal
</UL>

<P><STRONG><a name="[1fc]"></a>_tx_thread_initialize</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, tx_thread_initialize.o(.text._tx_thread_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _tx_thread_initialize
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_initialize_high_level
</UL>

<P><STRONG><a name="[18e]"></a>_tx_thread_preemption_change</STRONG> (Thumb, 272 bytes, Stack size 56 bytes, tx_thread_preemption_change.o(.text._tx_thread_preemption_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = _tx_thread_preemption_change &rArr; _tx_thread_system_preempt_check
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_preempt_check
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_packet_pool_create
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_ip_create
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_create
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_send_internal
</UL>

<P><STRONG><a name="[bf]"></a>_tx_thread_shell_entry</STRONG> (Thumb, 156 bytes, Stack size 48 bytes, tx_thread_shell_entry.o(.text._tx_thread_shell_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = _tx_thread_shell_entry &rArr; _tx_thread_system_suspend &rArr; _tx_timer_system_activate
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_suspend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tx_thread_create.o(.text._tx_thread_create)
</UL>
<P><STRONG><a name="[153]"></a>_tx_thread_sleep</STRONG> (Thumb, 268 bytes, Stack size 64 bytes, tx_thread_sleep.o(.text._tx_thread_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = _tx_thread_sleep &rArr; _tx_thread_system_suspend &rArr; _tx_timer_system_activate
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_0_entry
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_arp_packet_send
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_checksum_compute
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_packet_send
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_driver_packet_send
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_header_add
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_send_ns
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_state_wait
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_send_internal
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxd_ipv6_interface_find
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_dest_table_find
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_dest_table_add
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxd_ipv6_router_lookup
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ipv6_header_add
</UL>

<P><STRONG><a name="[173]"></a>_tx_thread_system_preempt_check</STRONG> (Thumb, 116 bytes, Stack size 28 bytes, tx_thread_system_preempt_check.o(.text._tx_thread_system_preempt_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = _tx_thread_system_preempt_check
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_thread_create
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_semaphore_create
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_byte_pool_create
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_create
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_put
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_event_flags_set
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv4_process_echo_reply
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_preemption_change
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_prioritize
</UL>

<P><STRONG><a name="[172]"></a>_tx_thread_system_resume</STRONG> (Thumb, 600 bytes, Stack size 96 bytes, tx_thread_system_resume.o(.text._tx_thread_system_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _tx_thread_system_resume &rArr; _tx_timer_system_deactivate
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_system_deactivate
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_create
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_put
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_event_flags_set
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_release
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv4_process_echo_reply
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_pool_cleanup
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_client_bind_cleanup
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_thread_resume
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_transmit_cleanup
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_receive_cleanup
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_disconnect_cleanup
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_connect_cleanup
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_udp_packet_receive
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_expiration_process
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_cleanup
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_event_flags_cleanup
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_priority_change
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_semaphore_cleanup
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_timeout
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_semaphore_put
</UL>

<P><STRONG><a name="[1ae]"></a>_tx_thread_system_suspend</STRONG> (Thumb, 660 bytes, Stack size 120 bytes, tx_thread_system_suspend.o(.text._tx_thread_system_suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = _tx_thread_system_suspend &rArr; _tx_timer_system_activate
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_system_activate
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_sleep
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_get
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_event_flags_get
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_allocate
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_tcp_socket_thread_suspend
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_priority_change
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_shell_entry
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_semaphore_get
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_thread_entry
</UL>

<P><STRONG><a name="[cd]"></a>_tx_thread_time_slice</STRONG> (Thumb, 166 bytes, Stack size 20 bytes, tx_thread_time_slice.o(.text._tx_thread_time_slice))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _tx_thread_time_slice
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_interrupt
</UL>

<P><STRONG><a name="[be]"></a>_tx_thread_timeout</STRONG> (Thumb, 124 bytes, Stack size 48 bytes, tx_thread_timeout.o(.text._tx_thread_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _tx_thread_timeout &rArr; _tx_thread_system_resume &rArr; _tx_timer_system_deactivate
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tx_thread_create.o(.text._tx_thread_create)
</UL>
<P><STRONG><a name="[190]"></a>_tx_timer_create</STRONG> (Thumb, 228 bytes, Stack size 64 bytes, tx_timer_create.o(.text._tx_timer_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = _tx_timer_create &rArr; _tx_timer_system_activate
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_system_activate
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_create
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_fast_periodic_timer_create
</UL>

<P><STRONG><a name="[cc]"></a>_tx_timer_expiration_process</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, tx_timer_expiration_process.o(.text._tx_timer_expiration_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = _tx_timer_expiration_process &rArr; _tx_thread_system_resume &rArr; _tx_timer_system_deactivate
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_interrupt
</UL>

<P><STRONG><a name="[1fd]"></a>_tx_timer_initialize</STRONG> (Thumb, 290 bytes, Stack size 48 bytes, tx_timer_initialize.o(.text._tx_timer_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = _tx_timer_initialize &rArr; _tx_thread_create &rArr; _tx_thread_system_resume &rArr; _tx_timer_system_deactivate
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_create
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_initialize_high_level
</UL>

<P><STRONG><a name="[207]"></a>_tx_timer_system_activate</STRONG> (Thumb, 214 bytes, Stack size 28 bytes, tx_timer_system_activate.o(.text._tx_timer_system_activate))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = _tx_timer_system_activate
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_suspend
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_create
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_thread_entry
</UL>

<P><STRONG><a name="[206]"></a>_tx_timer_system_deactivate</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, tx_timer_system_deactivate.o(.text._tx_timer_system_deactivate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _tx_timer_system_deactivate
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
</UL>

<P><STRONG><a name="[c0]"></a>_tx_timer_thread_entry</STRONG> (Thumb, 550 bytes, Stack size 104 bytes, tx_timer_thread_entry.o(.text._tx_timer_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = _tx_timer_thread_entry &rArr; _tx_thread_system_suspend &rArr; _tx_timer_system_activate
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_suspend
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_system_activate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tx_timer_initialize.o(.text._tx_timer_initialize)
</UL>
<P><STRONG><a name="[208]"></a>_txe_byte_pool_create</STRONG> (Thumb, 380 bytes, Stack size 80 bytes, txe_byte_pool_create.o(.text._txe_byte_pool_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _txe_byte_pool_create &rArr; _tx_byte_pool_create
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_preempt_check
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_byte_pool_create
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_application_define
</UL>

<P><STRONG><a name="[209]"></a>_txe_semaphore_create</STRONG> (Thumb, 352 bytes, Stack size 80 bytes, txe_semaphore_create.o(.text._txe_semaphore_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = _txe_semaphore_create &rArr; _tx_semaphore_create
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_preempt_check
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_semaphore_create
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_1_entry
</UL>

<P><STRONG><a name="[20b]"></a>_txe_semaphore_get</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, txe_semaphore_get.o(.text._txe_semaphore_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = _txe_semaphore_get &rArr; _tx_semaphore_get &rArr; _tx_thread_system_suspend &rArr; _tx_timer_system_activate
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_semaphore_get
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_1_entry
</UL>

<P><STRONG><a name="[20c]"></a>_txe_semaphore_put</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, txe_semaphore_put.o(.text._txe_semaphore_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = _txe_semaphore_put &rArr; _tx_semaphore_put &rArr; _tx_thread_system_resume &rArr; _tx_timer_system_deactivate
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_semaphore_put
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_callback
</UL>

<P><STRONG><a name="[df]"></a>_txe_thread_create</STRONG> (Thumb, 614 bytes, Stack size 128 bytes, txe_thread_create.o(.text._txe_thread_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = _txe_thread_create &rArr; _tx_thread_create &rArr; _tx_thread_system_resume &rArr; _tx_timer_system_deactivate
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_create
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_preempt_check
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ThreadX_Init
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_NetXDuo_Init
</UL>

<P><STRONG><a name="[ea]"></a>assert_failed</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, main.o(.text.assert_failed))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = assert_failed &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_Init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_ConfigSupply
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MPU_ConfigRegion
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetTxFifoThreshold
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetRxFifoThreshold
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_DisableFifoMode
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL3_Config
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL2_Config
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRCEx_Polynomial_Set
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSCFG_ETHInterfaceSelect
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
</UL>

<P><STRONG><a name="[c3]"></a>fputc</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, usart.o(.text.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[9b]"></a>main</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = main &rArr; MX_ThreadX_Init &rArr; _tx_initialize_kernel_enter &rArr; tx_application_define &rArr; App_ThreadX_Init &rArr; _txe_thread_create &rArr; _tx_thread_create &rArr; _tx_thread_system_resume &rArr; _tx_timer_system_deactivate
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART4_Init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ThreadX_Init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ETH_Init
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CRC_Init
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Config
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[15b]"></a>nx_eth_phy_get_link_state</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, nx_stm32_phy_driver.o(.text.nx_eth_phy_get_link_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nx_eth_phy_get_link_state &rArr; LAN8742_GetLinkState
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LAN8742_GetLinkState
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_driver_hardware_get_status
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_driver_enable
</UL>

<P><STRONG><a name="[15a]"></a>nx_eth_phy_init</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, nx_stm32_phy_driver.o(.text.nx_eth_phy_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = nx_eth_phy_init &rArr; LAN8742_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LAN8742_RegisterBusIO
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LAN8742_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_driver_enable
</UL>

<P><STRONG><a name="[c1]"></a>nx_stm32_eth_driver</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, nx_stm32_eth_driver.o(.text.nx_stm32_eth_driver))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = nx_stm32_eth_driver &rArr; _nx_driver_enable &rArr; _nx_driver_hardware_enable &rArr; HAL_ETH_Start_IT &rArr; ETH_UpdateDescriptor &rArr; HAL_ETH_RxAllocateCallback &rArr; _nxe_packet_allocate &rArr; _nx_packet_allocate &rArr; _tx_thread_system_suspend &rArr; _tx_timer_system_activate
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_driver_packet_send
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_driver_multicast_leave
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_driver_multicast_join
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_driver_interface_attach
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_driver_initialize
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_driver_get_status
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_driver_enable
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_driver_disable
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_driver_deferred_processing
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_netxduo.o(.text.thread_1_entry)
</UL>
<P><STRONG><a name="[9e]"></a>thread_0_entry</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, app_threadx.o(.text.thread_0_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = thread_0_entry &rArr; _tx_thread_sleep &rArr; _tx_thread_system_suspend &rArr; _tx_timer_system_activate
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_sleep
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_threadx.o(.text.App_ThreadX_Init)
</UL>
<P><STRONG><a name="[9f]"></a>thread_1_entry</STRONG> (Thumb, 886 bytes, Stack size 144 bytes, app_netxduo.o(.text.thread_1_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 1084 + Unknown Stack Size
<LI>Call Chain = thread_1_entry &rArr; _nxe_tcp_socket_send &rArr; _nx_tcp_socket_send &rArr; _nx_tcp_socket_send_internal &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ip_checksum_compute &rArr; _tx_thread_sleep &rArr; _tx_thread_system_suspend &rArr; _tx_timer_system_activate
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_semaphore_get
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_semaphore_create
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_udp_source_extract
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_udp_enable
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_tcp_socket_send
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_tcp_socket_receive
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_tcp_socket_info_get
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_tcp_socket_disconnect
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_tcp_socket_create
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_tcp_server_socket_unaccept
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_tcp_server_socket_relisten
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_tcp_server_socket_listen
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_tcp_server_socket_accept
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_tcp_enable
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_packet_release
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_packet_pool_create
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_packet_data_retrieve
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_ip_fragment_enable
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_ip_create
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_icmp_enable
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_arp_enable
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_system_initialize
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_netxduo.o(.text.MX_NetXDuo_Init)
</UL>
<P><STRONG><a name="[1ff]"></a>tx_application_define</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, app_azure_rtos.o(.text.tx_application_define))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = tx_application_define &rArr; App_ThreadX_Init &rArr; _txe_thread_create &rArr; _tx_thread_create &rArr; _tx_thread_system_resume &rArr; _tx_timer_system_deactivate
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ThreadX_Init
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_byte_pool_create
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_NetXDuo_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_initialize_kernel_enter
</UL>

<P><STRONG><a name="[211]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[233]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[234]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[235]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[e0]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_1_entry
</UL>

<P><STRONG><a name="[236]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[237]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[238]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[13e]"></a>MPU_Config</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, main.o(.text.MPU_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MPU_Config &rArr; HAL_MPU_ConfigRegion &rArr; assert_failed &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MPU_Enable
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MPU_Disable
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MPU_ConfigRegion
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c2]"></a>tcp_listen_callback</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, app_netxduo.o(.text.tcp_listen_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = tcp_listen_callback &rArr; _txe_semaphore_put &rArr; _tx_semaphore_put &rArr; _tx_thread_system_resume &rArr; _tx_timer_system_deactivate
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_semaphore_put
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_netxduo.o(.text.thread_1_entry)
</UL>
<P><STRONG><a name="[119]"></a>NVIC_EncodePriority</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, stm32h7xx_hal_cortex.o(.text.NVIC_EncodePriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = NVIC_EncodePriority
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[117]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, stm32h7xx_hal_cortex.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>

<P><STRONG><a name="[118]"></a>__NVIC_GetPriorityGrouping</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(.text.__NVIC_GetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[11a]"></a>__NVIC_SetPriority</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, stm32h7xx_hal_cortex.o(.text.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[11b]"></a>__NVIC_SetPriorityGrouping</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, stm32h7xx_hal_cortex.o(.text.__NVIC_SetPriorityGrouping))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>

<P><STRONG><a name="[11f]"></a>RCCEx_PLL2_Config</STRONG> (Thumb, 792 bytes, Stack size 32 bytes, stm32h7xx_hal_rcc_ex.o(.text.RCCEx_PLL2_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RCCEx_PLL2_Config &rArr; assert_failed &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[120]"></a>RCCEx_PLL3_Config</STRONG> (Thumb, 800 bytes, Stack size 32 bytes, stm32h7xx_hal_rcc_ex.o(.text.RCCEx_PLL3_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RCCEx_PLL3_Config &rArr; assert_failed &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[fa]"></a>ETH_DMARxDescListInit</STRONG> (Thumb, 146 bytes, Stack size 12 bytes, stm32h7xx_hal_eth.o(.text.ETH_DMARxDescListInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ETH_DMARxDescListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Init
</UL>

<P><STRONG><a name="[f9]"></a>ETH_DMATxDescListInit</STRONG> (Thumb, 120 bytes, Stack size 12 bytes, stm32h7xx_hal_eth.o(.text.ETH_DMATxDescListInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ETH_DMATxDescListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Init
</UL>

<P><STRONG><a name="[e4]"></a>ETH_MACDMAConfig</STRONG> (Thumb, 234 bytes, Stack size 160 bytes, stm32h7xx_hal_eth.o(.text.ETH_MACDMAConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = ETH_MACDMAConfig &rArr; ETH_SetMACConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_SetMACConfig
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_SetDMAConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Init
</UL>

<P><STRONG><a name="[109]"></a>ETH_Prepare_Tx_Descriptors</STRONG> (Thumb, 1274 bytes, Stack size 52 bytes, stm32h7xx_hal_eth.o(.text.ETH_Prepare_Tx_Descriptors))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ETH_Prepare_Tx_Descriptors
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Transmit_IT
</UL>

<P><STRONG><a name="[e6]"></a>ETH_SetDMAConfig</STRONG> (Thumb, 214 bytes, Stack size 12 bytes, stm32h7xx_hal_eth.o(.text.ETH_SetDMAConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ETH_SetDMAConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_SetDMAConfig
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACDMAConfig
</UL>

<P><STRONG><a name="[e5]"></a>ETH_SetMACConfig</STRONG> (Thumb, 504 bytes, Stack size 12 bytes, stm32h7xx_hal_eth.o(.text.ETH_SetMACConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ETH_SetMACConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_SetMACConfig
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACDMAConfig
</UL>

<P><STRONG><a name="[e7]"></a>ETH_UpdateDescriptor</STRONG> (Thumb, 260 bytes, Stack size 40 bytes, stm32h7xx_hal_eth.o(.text.ETH_UpdateDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = ETH_UpdateDescriptor &rArr; HAL_ETH_RxAllocateCallback &rArr; _nxe_packet_allocate &rArr; _nx_packet_allocate &rArr; _tx_thread_system_suspend &rArr; _tx_timer_system_activate
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_RxAllocateCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Start_IT
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_ReadData
</UL>

<P><STRONG><a name="[133]"></a>UARTEx_SetNbDataToProcess</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, stm32h7xx_hal_uart_ex.o(.text.UARTEx_SetNbDataToProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UARTEx_SetNbDataToProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetTxFifoThreshold
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetRxFifoThreshold
</UL>

<P><STRONG><a name="[155]"></a>_nx_driver_deferred_processing</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, nx_stm32_eth_driver.o(.text._nx_driver_deferred_processing))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = _nx_driver_deferred_processing &rArr; _nx_driver_hardware_packet_received &rArr; HAL_ETH_ReadData &rArr; ETH_UpdateDescriptor &rArr; HAL_ETH_RxAllocateCallback &rArr; _nxe_packet_allocate &rArr; _nx_packet_allocate &rArr; _tx_thread_system_suspend &rArr; _tx_timer_system_activate
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_ReleaseTxPacket
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_driver_hardware_packet_received
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nx_stm32_eth_driver
</UL>

<P><STRONG><a name="[157]"></a>_nx_driver_disable</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, nx_stm32_eth_driver.o(.text._nx_driver_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _nx_driver_disable &rArr; _nx_driver_hardware_disable &rArr; HAL_ETH_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_driver_hardware_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nx_stm32_eth_driver
</UL>

<P><STRONG><a name="[159]"></a>_nx_driver_enable</STRONG> (Thumb, 282 bytes, Stack size 152 bytes, nx_stm32_eth_driver.o(.text._nx_driver_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = _nx_driver_enable &rArr; _nx_driver_hardware_enable &rArr; HAL_ETH_Start_IT &rArr; ETH_UpdateDescriptor &rArr; HAL_ETH_RxAllocateCallback &rArr; _nxe_packet_allocate &rArr; _nx_packet_allocate &rArr; _tx_thread_system_suspend &rArr; _tx_timer_system_activate
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_SetMACConfig
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_GetMACConfig
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nx_eth_phy_init
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nx_eth_phy_get_link_state
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_driver_hardware_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nx_stm32_eth_driver
</UL>

<P><STRONG><a name="[15e]"></a>_nx_driver_get_status</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, nx_stm32_eth_driver.o(.text._nx_driver_get_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _nx_driver_get_status &rArr; _nx_driver_hardware_get_status &rArr; nx_eth_phy_get_link_state &rArr; LAN8742_GetLinkState
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_driver_hardware_get_status
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nx_stm32_eth_driver
</UL>

<P><STRONG><a name="[158]"></a>_nx_driver_hardware_disable</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, nx_stm32_eth_driver.o(.text._nx_driver_hardware_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _nx_driver_hardware_disable &rArr; HAL_ETH_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_driver_disable
</UL>

<P><STRONG><a name="[15d]"></a>_nx_driver_hardware_enable</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, nx_stm32_eth_driver.o(.text._nx_driver_hardware_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = _nx_driver_hardware_enable &rArr; HAL_ETH_Start_IT &rArr; ETH_UpdateDescriptor &rArr; HAL_ETH_RxAllocateCallback &rArr; _nxe_packet_allocate &rArr; _nx_packet_allocate &rArr; _tx_thread_system_suspend &rArr; _tx_timer_system_activate
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_driver_enable
</UL>

<P><STRONG><a name="[15f]"></a>_nx_driver_hardware_get_status</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, nx_stm32_eth_driver.o(.text._nx_driver_hardware_get_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _nx_driver_hardware_get_status &rArr; nx_eth_phy_get_link_state &rArr; LAN8742_GetLinkState
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nx_eth_phy_get_link_state
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_driver_get_status
</UL>

<P><STRONG><a name="[161]"></a>_nx_driver_hardware_initialize</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, nx_stm32_eth_driver.o(.text._nx_driver_hardware_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = _nx_driver_hardware_initialize &rArr; HAL_ETH_SetDMAConfig &rArr; ETH_SetDMAConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_SetDMAConfig
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_driver_initialize
</UL>

<P><STRONG><a name="[162]"></a>_nx_driver_hardware_multicast_join</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, nx_stm32_eth_driver.o(.text._nx_driver_hardware_multicast_join))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _nx_driver_hardware_multicast_join &rArr; HAL_ETH_SetMACFilterConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_SetMACFilterConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_driver_multicast_join
</UL>

<P><STRONG><a name="[164]"></a>_nx_driver_hardware_multicast_leave</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, nx_stm32_eth_driver.o(.text._nx_driver_hardware_multicast_leave))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _nx_driver_hardware_multicast_leave &rArr; HAL_ETH_SetMACFilterConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_SetMACFilterConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_driver_multicast_leave
</UL>

<P><STRONG><a name="[156]"></a>_nx_driver_hardware_packet_received</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, nx_stm32_eth_driver.o(.text._nx_driver_hardware_packet_received))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = _nx_driver_hardware_packet_received &rArr; HAL_ETH_ReadData &rArr; ETH_UpdateDescriptor &rArr; HAL_ETH_RxAllocateCallback &rArr; _nxe_packet_allocate &rArr; _nx_packet_allocate &rArr; _tx_thread_system_suspend &rArr; _tx_timer_system_activate
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_ReadData
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_driver_transfer_to_netx
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_driver_deferred_processing
</UL>

<P><STRONG><a name="[166]"></a>_nx_driver_hardware_packet_send</STRONG> (Thumb, 326 bytes, Stack size 104 bytes, nx_stm32_eth_driver.o(.text._nx_driver_hardware_packet_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = _nx_driver_hardware_packet_send &rArr; HAL_ETH_Transmit_IT &rArr; ETH_Prepare_Tx_Descriptors
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Transmit_IT
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_driver_packet_send
</UL>

<P><STRONG><a name="[167]"></a>_nx_driver_initialize</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, nx_stm32_eth_driver.o(.text._nx_driver_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = _nx_driver_initialize &rArr; _nx_driver_hardware_initialize &rArr; HAL_ETH_SetDMAConfig &rArr; ETH_SetDMAConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_driver_hardware_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nx_stm32_eth_driver
</UL>

<P><STRONG><a name="[210]"></a>_nx_driver_interface_attach</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, nx_stm32_eth_driver.o(.text._nx_driver_interface_attach))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _nx_driver_interface_attach
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nx_stm32_eth_driver
</UL>

<P><STRONG><a name="[168]"></a>_nx_driver_multicast_join</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, nx_stm32_eth_driver.o(.text._nx_driver_multicast_join))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _nx_driver_multicast_join &rArr; _nx_driver_hardware_multicast_join &rArr; HAL_ETH_SetMACFilterConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_driver_hardware_multicast_join
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nx_stm32_eth_driver
</UL>

<P><STRONG><a name="[169]"></a>_nx_driver_multicast_leave</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, nx_stm32_eth_driver.o(.text._nx_driver_multicast_leave))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _nx_driver_multicast_leave &rArr; _nx_driver_hardware_multicast_leave &rArr; HAL_ETH_SetMACFilterConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_driver_hardware_multicast_leave
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nx_stm32_eth_driver
</UL>

<P><STRONG><a name="[16a]"></a>_nx_driver_packet_send</STRONG> (Thumb, 506 bytes, Stack size 64 bytes, nx_stm32_eth_driver.o(.text._nx_driver_packet_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = _nx_driver_packet_send &rArr; _nxe_packet_transmit_release &rArr; _nx_packet_transmit_release &rArr; _nx_packet_release &rArr; _tx_thread_system_resume &rArr; _tx_timer_system_deactivate
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_packet_transmit_release
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_driver_hardware_packet_send
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nx_stm32_eth_driver
</UL>

<P><STRONG><a name="[165]"></a>_nx_driver_transfer_to_netx</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, nx_stm32_eth_driver.o(.text._nx_driver_transfer_to_netx))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = _nx_driver_transfer_to_netx &rArr; _nx_rarp_packet_deferred_receive &rArr; _tx_event_flags_set &rArr; _tx_thread_system_resume &rArr; _tx_timer_system_deactivate
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nxe_packet_release
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_rarp_packet_deferred_receive
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_packet_deferred_receive
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_arp_packet_deferred_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_driver_hardware_packet_received
</UL>

<P><STRONG><a name="[1]"></a>lan8742_io_deinit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nx_stm32_phy_driver.o(.text.lan8742_io_deinit))
<BR>[Address Reference Count : 1]<UL><LI> nx_stm32_phy_driver.o(.data.LAN8742_IOCtx)
</UL>
<P><STRONG><a name="[4]"></a>lan8742_io_get_tick</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, nx_stm32_phy_driver.o(.text.lan8742_io_get_tick))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lan8742_io_get_tick
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nx_stm32_phy_driver.o(.data.LAN8742_IOCtx)
</UL>
<P><STRONG><a name="[0]"></a>lan8742_io_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, nx_stm32_phy_driver.o(.text.lan8742_io_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lan8742_io_init &rArr; HAL_ETH_SetMDIOClockRange &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_SetMDIOClockRange
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nx_stm32_phy_driver.o(.data.LAN8742_IOCtx)
</UL>
<P><STRONG><a name="[3]"></a>lan8742_io_read_reg</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, nx_stm32_phy_driver.o(.text.lan8742_io_read_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = lan8742_io_read_reg &rArr; HAL_ETH_ReadPHYRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_ReadPHYRegister
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nx_stm32_phy_driver.o(.data.LAN8742_IOCtx)
</UL>
<P><STRONG><a name="[2]"></a>lan8742_io_write_reg</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, nx_stm32_phy_driver.o(.text.lan8742_io_write_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = lan8742_io_write_reg &rArr; HAL_ETH_WritePHYRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_WritePHYRegister
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nx_stm32_phy_driver.o(.data.LAN8742_IOCtx)
</UL>
<P><STRONG><a name="[aa]"></a>_nx_ip_fast_periodic_timer_entry</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, nx_ip_fast_periodic_timer_entry.o(.text._nx_ip_fast_periodic_timer_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = _nx_ip_fast_periodic_timer_entry &rArr; _tx_event_flags_set &rArr; _tx_thread_system_resume &rArr; _tx_timer_system_deactivate
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_event_flags_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nx_ip_fast_periodic_timer_entry.o(.text._nx_ip_fast_periodic_timer_create)
</UL>
<P><STRONG><a name="[198]"></a>_nx_ip_fragment_cleanup</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, nx_ip_fragment_timeout_check.o(.text._nx_ip_fragment_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 732<LI>Call Chain = _nx_ip_fragment_cleanup &rArr; _nx_icmpv6_send_error_message &rArr; _nx_ipv6_packet_send &rArr; _nx_icmpv6_send_ns &rArr; _nx_ip_checksum_compute &rArr; _tx_thread_sleep &rArr; _tx_thread_system_suspend &rArr; _tx_timer_system_activate
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_packet_release
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv4_send_error_message
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_icmpv6_send_error_message
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPv6_Address_Type
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nx_ip_fragment_timeout_check
</UL>

<P><STRONG><a name="[213]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[212]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[216]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[215]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
